from elementmaker import E
from settings import options_list, character_settings, createHTMLOption, createHTMLOptionEx, \
    initializeSettings, saveSettings, setCurrentTab, restoreSavedSettings, loadSettings
from utils import ROLL20_URL, DNDBEYOND_CHARACTER_URL, DNDBEYOND_MONSTER_URL, DNDBEYOND_ENCOUNTER_URL

character = None
def createOptionList():
    options = []
    for option in options_list:
        child = createHTMLOption(option, True)
        if child:
            options.append(child)
    $("main").prepend(E.ul(class_="list-group beyond20-options", *options))
    $(".beyond20-options").append(E.li(class_="list-group-item beyond20-option",
                                       E.a(id="openOptions", class_="list-content", href='#',
                                           E.h4("More Options")
                                           )
                                       )
                                  )
    img = $("#donate").find("img")
    img.attr("src", img.attr("src").replace("donate.png", "donate32.png"))
    $("#openOptions").bind('click', def (ev):
        chrome.runtime.openOptionsPage()
    )

def save_settings():
    nonlocal character
    saveSettings(def(settings):
                     chrome.runtime.sendMessage({"action": "settings", "type": "general", "settings": settings})
                 )
    if character is not None:
        saveSettings(def(settings):
                         chrome.runtime.sendMessage({"action": "settings", "type": "character", "id": character.id, "settings": settings})
                     , "character-" + character.id, character_settings)

def setupHTML():
    createOptionList()
    $('.beyond20-option-input').change(save_settings)
    $(".beyond20-options").on("markaChanged", save_settings)
    $(document).on('click', 'a', def(ev):
        href = this.getAttribute('href')
        if len(href) > 0 and href != "#":
            chrome.tabs.create({"url": this.href})
        return False
    )

def populateCharacter(response):
    nonlocal character
    character = response
    if response?:
        console.log("Received character: ", response)
        options = $(".beyond20-options")
        options.append(E.li(class_="list-group-item beyond20-option", id="character-option", style="text-align: center; padding: 10px 15px;",
                            E.h4(" == Character Specific Options ==", style="margin: 0px;"),
                            E.p(response.name, style="margin: 0px;"))
                       )

        new_options = False
        if "Rogue" in response.classes:
            e = createHTMLOption("rogue-sneak-attack", False, character_settings)
            new_options = True
            options.append(e)
        if "Disciple of Life" in response["class-features"]:
            e = createHTMLOption("cleric-disciple-life", False, character_settings)
            new_options = True
            options.append(e)
        if "Bard" in response.classes:
            e = createHTMLOption("bard-joat", False, character_settings)
            new_options = True
            options.append(e)
        if "Sharpshooter" in response["feats"]:
            e = createHTMLOption("sharpshooter", False, character_settings)
            new_options = True
            options.append(e)
        if "Great Weapon Master" in response["feats"]:
            e = createHTMLOption("great-weapon-master", False, character_settings)
            new_options = True
            options.append(e)
        # Hide character options if there are none
        if new_options == False:
            $("#character-option").css("display", "none")
        loadSettings(response.settings, character_settings)
    $('.beyond20-option-input').off('change', save_settings)
    $('.beyond20-option-input').change(save_settings)
    initializeSettings()

def addMonsterOptions():
    option = options_list["whisper-monsters"]
    option["short"] = "Whisper monster rolls"
    e = createHTMLOptionEx("whisper-monsters", option, True)
    $(e).insertAfter($("#whispers").parents("li"))
    $('.beyond20-option-input').off('change', save_settings)
    $('.beyond20-option-input').change(save_settings)
    initializeSettings()

def tabMatches(tab, url):
    return tab.url.match(url.replace(/\*/g, "[^]*")) != None

def actOnCurrentTab(tabs):
    setCurrentTab(tabs[0])
    if tabMatches(tabs[0], ROLL20_URL):
        e = options_list["roll20-tab"].createHTMLElement("roll20-tab", True)
        options = $(".beyond20-options")
        options.append(E.li(class_="list-group-item beyond20-option", style="text-align: center; margin: 10px;",
                                           E.h4(" == Roll20 Tab Specific Options ==")
                                           ))
        options.append(e)
        initializeSettings()
    elif tabMatches(tabs[0], DNDBEYOND_CHARACTER_URL):
        chrome.tabs.sendMessage(tabs[0].id, {"action": "get-character"}, populateCharacter)
    elif tabMatches(tabs[0], DNDBEYOND_MONSTER_URL) or tabMatches(tabs[0], DNDBEYOND_ENCOUNTER_URL):
        addMonsterOptions()
    else:
        initializeSettings()


setupHTML()
chrome.tabs.query({"active": True, "currentWindow": True}, actOnCurrentTab)
