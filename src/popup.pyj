from elementmaker import E
from settings import options_list, character_settings, createHTMLOption, initializeSettings, saveSettings, setCurrentTab, restoreSavedSettings
from utils import ROLL20_URL, DNDBEYOND_URL

character = None
def createOptionList():
    options = []
    for option in options_list:
        child = createHTMLOption(option, True)
        if child:
            options.append(child)
    $("main").prepend(E.ul(class_="list-group beyond20-options", *options))
    $(".beyond20-options").append(E.li(class_="list-group-item beyond20-option",
                                       E.a(id="openOptions", class_="list-content", href='#',
                                           E.h4("More Options")
                                           )
                                       )
                                  )
    img = $("#donate").find("img")
    img.attr("src", img.attr("src").replace("donate.png", "donate32.png"))
    $("#openOptions").bind('click', def (ev):
        chrome.runtime.openOptionsPage()
    )

def save_settings():
    nonlocal character
    saveSettings(def(settings):
                     chrome.runtime.sendMessage({"action": "settings", "type": "general", "settings": settings})
                 )
    if character is not None:
        saveSettings(def(settings):
                         chrome.runtime.sendMessage({"action": "settings", "type": "character", "id": character.id, "settings": settings})
                     , "character-" + character.id, character_settings)

def setupHTML():
    createOptionList()
    $('.beyond20-option-input').change(save_settings)
    $(".beyond20-options").on("markaChanged", save_settings)
    $(document).on('click', 'a', def(ev):
        href = this.getAttribute('href')
        if len(href) > 0 and href != "#":
            chrome.tabs.create({"url": this.href})
        return False
    )

def populateCharacter(response):
    nonlocal character
    character = response
    console.log("Received character: ", response)
    options = $(".beyond20-options")
    options.append(E.li(class_="list-group-item beyond20-option", style="text-align: center; padding: 10px 15px;",
                        E.h4(" == Character Specific Options ==", style="margin: 0px;"),
                        E.p(response.name, style="margin: 0px;"))
                   )

    for class_ in response.classes:
        if class_ == "Rogue":
            e = createHTMLOption("rogue-sneak-attack", False, character_settings)
            options.append(e)
        elif class_ == "Cleric":
            e = createHTMLOption("cleric-disciple-life", False, character_settings)
            options.append(e)
    restoreSavedSettings("character-" + response.id, character_settings)
    $('.beyond20-option-input').off('change', save_settings)
    $('.beyond20-option-input').change(save_settings)
    initializeSettings()

def actOnCurrentTab(tabs):
    setCurrentTab(tabs[0])
    if tabs[0].url.match(ROLL20_URL.replace(/\*/g, "[^]*")) != None:
        e = options_list["roll20-tab"].createHTMLElement("roll20-tab", True)
        options = $(".beyond20-options")
        options.append(E.li(class_="list-group-item beyond20-option", style="text-align: center; margin: 10px;",
                                           E.h4(" == Roll20 Tab Specific Options ==")
                                           ))
        options.append(e)
        initializeSettings()
    else:
        chrome.tabs.sendMessage(tabs[0].id, {"action": "get-character"}, populateCharacter)


setupHTML()
chrome.tabs.query({"active": True, "currentWindow": True}, actOnCurrentTab)
