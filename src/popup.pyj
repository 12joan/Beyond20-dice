from elementmaker import E
from settings import options_list, createHTMLOption, initializeSettings, saveSettings, setCurrentTab, restoreSavedSettings
from utils import ROLL20_URL, DNDBEYOND_URL


def createOptionList():
    options = []
    for option in options_list:
        child = createHTMLOption(option, True)
        if child:
            options.append(child)
    $("main").prepend(E.ul(class_="list-group beyond20-options", *options))
    $(".beyond20-options").append(E.li(class_="list-group-item beyond20-option",
                                       E.a(id="openOptions", class_="list-content", href='#',
                                           E.h4("More Options")
                                           )
                                       )
                                  )
    img = $("#donate").find("img")
    img.attr("src", img.attr("src").replace("donate.png", "donate32.png"))
    $("#openOptions").bind('click', def (ev):
        chrome.runtime.openOptionsPage()
    )

def save_settings():
    cb = def(settings):
        if chrome.runtime.lastError:
            console.log('Chrome Runtime Error', chrome.runtime.lastError.message);
        else:
            chrome.runtime.sendMessage({"action": "settings", "settings": settings});
    saveSettings(cb)

def setupHTML():
    createOptionList()
    $('.beyond20-option-input').change(save_settings)
    $(".beyond20-options").on("markaChanged", save_settings)
    $(document).on('click', 'a', def(ev):
        href = this.getAttribute('href')
        if len(href) > 0 and href != "#":
            chrome.tabs.create({"url": this.href})
        return False
    )

def populateCharacter(response):
    console.log("Received character: ", response)
    initializeSettings()

def actOnCurrentTab(tabs):
    if tabs[0].url.match(ROLL20_URL.replace(/\*/g, "[^]*")) != None:
        setCurrentTab(tabs[0])

        e = options_list["roll20-tab"].createHTMLElement("roll20-tab", True)
        options = $(".beyond20-options")
        options.append(E.li(class_="list-group-item beyond20-option", style="text-align: center; margin: 10px;",
                                           E.h4(" == Roll20 Tab Specific Options ==")
                                           ))
        options.append(e)
        initializeSettings()
    else:
        chrome.tabs.sendMessage(tabs[0].id, {"action": "get-character"}, populateCharacter)


setupHTML()
chrome.tabs.query({"active": True, "currentWindow": True}, actOnCurrentTab)
