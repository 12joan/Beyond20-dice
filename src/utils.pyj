import re
from elementmaker import E 

# Name, short title, title, description, type, default, extra_options
# Types: bool, string, combobox, link

options_list = [
    ("whispers", "Whisper rolls", "Whisper rolls to the DM",\
         "If enabled, all the rolls will be whispered to the DM",\
         "bool", False),

    ("roll-advantage", "Roll with Advantage", "Always roll Advantange/Disadvantage", \
         "Always roll a second dice for Advantage/Disadvantage", \
         "bool", True),

    ("template", None, "Roll20 Character Sheet Setting", \
         "Select the Character Sheet Template that you use in Roll20\nIf the templates do not match, you will not see anything printed in the Roll20 chat.", \
         "combobox", "roll20", {"roll20": "D&D 5E By Roll20"}),

    ("donate", "Want to donate?", "Donate to show your appreciation!", \
         "I know you already appreciate this plugin, otherwise you wouldn't be using it!\nBut if you wish to donate to help keep development active on this extension, you can!", \
         "link", "https://www.paypal.me/KaKaRoTo", "images/donate.png")
    ]

def createHTMLOption(option, short=False):
    (name, short_title, title, description, option_type, default_value, extra) = option
    if short and short_title is None:
        return None
    description = "" if short else description
    description_p = list(map(E.p, description.split("\n")))
    if option_type == "bool":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-bool",
                 E.label(class_="list-content", for_=name,
                         E.h4(short_title if short else title),
                         *description_p,
                         E.div(class_='material-switch pull-right',
                               E.input(id=name, class_="beyond20-option-input", name=name, type_="checkbox"),
                               E.label(for_=name, class_="label-default")
                               )
                         )
                 )
    elif option_type == "combobox":
        make_li = def(o):
            return E.li(E.a(href="#", o))
        dropdown_options = list(map(make_li, Object.values(extra)))
        e = E.li(class_="list-group-item beyond20-option beyond20-option-combobox",
                 E.label(class_="list-content", for_=name,
                         E.h4(class_="select", short_title if short else title),
                         *description_p,
                         E.div(class_="button-group",
                               E.a(class_="input select", href="", extra[default_value]),
                               E.ul(id=name, class_="dropdown-menu",
                                    *dropdown_options),
                               E.i(id=name + "--icon", class_="icon select")
                               )
                         )
                 )
    elif option_type == "link":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-link",
                 E.label(class_="list-content", id=name,
                     E.a(href=default_value, 
                         E.h4(short_title if short else title)),
                     *description_p,
                     E.a(href=default_value,
                         E.div(class_="image-link",
                               E.img(class_="link-image", src=chrome.extension.getURL(extra))
                               )
                         )
                     )
                 )

    return e

def initializeMarka():
    groups = $('.beyond20-option-combobox')

    for i in range(groups.length):
        triggerOpen = groups.eq(i).find('.select')
        triggerClose = groups.eq(i).find('.dropdown-menu li')
        dropdown_menu = groups.eq(i).find(".dropdown-menu")
        marka = groups.eq(i).find('.icon')
        input = groups.eq(i).find('.input')

        console.log(marka)
        # set initial Marka icon
        m = new Marka('#' + marka.attr("id"))
        m.set('triangle').size(10)
        m.rotate('down')

        # trigger dropdown
        groups.eq(i).find('.button-group').append(marka)
        makeOpenCB = def(dropdown_menu, icon, m):
            return def(event):
                event.preventDefault()
                console.log("Adding open for", dropdown_menu)
                dropdown_menu.toggleClass('open')

                if icon.hasClass("marka-icon-times"):
                    m.set('triangle').size(10)
                else:
                    m.set('times').size(15)

        makeCloseCB = def(dropdown_menu, input, m):
            return def(event):
                event.preventDefault()
                input.text(this.innerText)
                console.log("Removing open for", dropdown_menu)
                dropdown_menu.removeClass('open')
                m.set('triangle').size(10)

        triggerOpen.bind("click", makeOpenCB(dropdown_menu, marka, m))
        triggerClose.bind("click", makeCloseCB(dropdown_menu, input, m))


def getDefaultSettings():
    settings = {}
    for option in options_list:
        settings[option[0]] = option[5]
    return settings



def replaceRollsCallback(match, modifiers_only, pre, dice, post, keep_original, pre_original, post_original, pre_dice, post_dice):
    if modifiers_only and match.string[match.start() - 1] in map(str, range(0, 10)):
        return match.group(0)
    if post < 100 and match.group(post) not in ["", " ", ";", ",", ".", ")", "("]:
        return match.group(0)

    result = match.group(pre) if pre > 0 else ""
    if keep_original:
        result += pre_original
        for i in range(dice, post):
            result += match.group(i)
        result += post_original
    
    result += pre_dice
    for i in range(dice, post):
        result += match.group(i)
    result += post_dice
    result += match.group(post) if post < 100 else ""
    print(result)
    return result

def replaceRolls(modifiers_only, text, keep_original=False, pre_original="", post_original="", pre_dice="", post_dice=""):
    #repl = "\\1[\\2\\3](!&#13;&#91;&#91;\\2\\3&#93;&#93;)\\4" if keep_original else "\\1[[\\2\\3]]\\4"
    #repl2 = "\\1(!&#13;&#91;&#91;1d20\\1&#93;&#93;)\\2" if keep_original else "[[1d20\\1]]\\2"
    dice_regexp = "(^|\s|\\(|\\))([0-9]*d[0-9]+)((?:\s*[-+]\s*[0-9]+)?)($|\s|.|;|,|\\)|\\()"
    modifiers_regexp = "(\s+)([-+]\s*[0-9]+)($|\s|.|;|,)"
    if modifiers_only:
        regexp = modifiers_regexp
        pre = 1
        dice = 2
        post = 3
    else:
        regexp = dice_regexp
        pre = 1
        dice = 2
        post = 4
    new_text = re.sub(regexp, def(m):
        return replaceRollsCallback(m, modifiers_only, pre, dice, \
                                        post, keep_original, pre_original, post_original, pre_dice, post_dice)
    ,
    text)

    
    print("Replacing '" + text + "' with : " + new_text)
    return new_text

def subRolls(text, keep_original=False, escape=False):
    if keep_original and escape:
        pre_original="["
        post_original="]"
        pre_dice="(!&#13;&#91;&#91;"
        post_dice="&#93;&#93;)"
    else:
        pre_original=""
        post_original=""
        pre_dice="[["
        post_dice="]]"
    text = replaceRolls(False, text, keep_original, pre_original, post_original, pre_dice, post_dice)
    return replaceRolls(True, text, keep_original, pre_original, post_original, pre_dice + "1d20 ", post_dice)

