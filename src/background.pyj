from utils import ROLL20_URL, DNDBEYOND_CHARACTER_URL, DNDBEYOND_MONSTER_URL, DNDBEYOND_ENCOUNTER_URL, \
    DNDBEYOND_SPELL_URL, CHANGELOG_URL, roll20TabTitle, getBrowser
from settings import getDefaultSettings, getStoredSettings, mergeSettings

settings = getDefaultSettings()
def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
            version = chrome.runtime.getManifest().version
            if settings["show-changelog"] and settings["last-version"] != version:
                mergeSettings({"last-version": version})
                chrome.tabs.create({"url": CHANGELOG_URL})
        )

def sendMessageTo(url, request):
    chrome.tabs.query({"url": url}, def(tabs):
        for tab in tabs:
            chrome.tabs.sendMessage(tab.id, request);
    )

def sendMessageToRoll20(request, limit=None):
    if limit:
        chrome.tabs.query({"url": ROLL20_URL}, def(tabs):
            found = False
            for tab in tabs:
                if (limit.id == 0 or tab.id == limit.id) and roll20TabTitle(tab) == limit.title:
                    chrome.tabs.sendMessage(tab.id, request);
                    found = True
                    break
            if not found and limit.id != 0:
                limit.id = 0
                mergeSettings({"roll20-tab": limit})
                for tab in tabs:
                    if roll20TabTitle(tab) == limit.title:
                        chrome.tabs.sendMessage(tab.id, request);
                        break
        )
    else:
        sendMessageTo(ROLL20_URL, request)
def sendMessageToBeyond(request):
    sendMessageTo(DNDBEYOND_CHARACTER_URL, request)
    sendMessageTo(DNDBEYOND_MONSTER_URL, request)
    sendMessageTo(DNDBEYOND_ENCOUNTER_URL, request)
    sendMessageTo(DNDBEYOND_SPELL_URL, request)
    sendMessageTo(DNDBEYOND_VEHICLE_URL, request)

def onMessage(request, sender, sendResponse):
    nonlocal settings

    console.log("Received message: ", request)
    if request.action in ["roll", "hp-update"]:
        sendMessageToRoll20(request, settings["roll20-tab"])
    elif request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
        sendMessageToRoll20(request)
        sendMessageToBeyond(request)
    elif request.action == "activate-icon":
        chrome.pageAction.show(sender.tab.id);
    elif request.action == "reload-me":
        chrome.tabs.reload(sender.tab.id);

def executeScripts(tabs, js_files):
    for tab in tabs:
        for file in js_files:
            chrome.tabs.executeScript(tab.id, { "file": file })

updateSettings()
chrome.runtime.onMessage.addListener(onMessage)

if getBrowser() == "Chrome":
    manifest = chrome.runtime.getManifest()
    for script in manifest.content_scripts:
        cb = def(files):
            return def(tabs):
                executeScripts(tabs, files)
        chrome.tabs.query({ "url": script.matches}, cb(script.js))

