import constants as c
from utils import roll20Title, isFVTT, fvttTitle, getBrowser, urlMatches
from settings import getDefaultSettings, getStoredSettings, mergeSettings

settings = getDefaultSettings()
fvtt_tabs = []

def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
            version = chrome.runtime.getManifest().version
            if settings["show-changelog"] and settings["last-version"] != version:
                mergeSettings({"last-version": version})
                chrome.tabs.create({"url": c.CHANGELOG_URL})
        )

def sendMessageTo(url, request, failure=None):
    chrome.tabs.query({"url": url}, def(tabs):
        if failure:
            failure(tabs.length == 0)
        for tab in tabs:
            chrome.tabs.sendMessage(tab.id, request)
    )

def filterVTTTab(request, limit, tabs, titleCB):
    found = False
    for tab in tabs:
        if (limit.id == 0 or tab.id == limit.id) and \
                (limit.title == None or titleCB(tab.title) == limit.title):
            chrome.tabs.sendMessage(tab.id, request)
            found = True
    if not found and limit.id != 0:
        limit.id = 0
        mergeSettings({"vtt-tab": limit})
        for tab in tabs:
            if titleCB(tab.title) == limit.title:
                chrome.tabs.sendMessage(tab.id, request)
                found = True
                break
    return found


def sendMessageToRoll20(request, limit=None, failure=None):
    if limit:
        vtt = limit.vtt ? "roll20"
        if vtt == "roll20":
            chrome.tabs.query({"url": c.ROLL20_URL}, def(tabs):
                found = filterVTTTab(request, limit, tabs, roll20Title)
                if failure:
                    failure(not found)
            )
        else:
            failure(True)
    else:
        sendMessageTo(c.ROLL20_URL, request, failure=failure)

def sendMessageToFVTT(request, limit, failure=None):
    nonlocal fvtt_tabs

    console.log("Sending msg to FVTT ", fvtt_tabs)
    if limit:
        vtt = limit.vtt ? "roll20"
        if vtt == "fvtt":
            found = filterVTTTab(request, limit, fvtt_tabs, fvttTitle)
            if failure:
                failure(not found)
        else:
            failure(True)
    else:
        if failure:
            failure(fvtt_tabs.length == 0)
        for tab in fvtt_tabs:
            chrome.tabs.sendMessage(tab.id, request)
    
def sendMessageToBeyond(request):
    sendMessageTo(c.DNDBEYOND_CHARACTER_URL, request)
    sendMessageTo(c.DNDBEYOND_MONSTER_URL, request)
    sendMessageTo(c.DNDBEYOND_ENCOUNTER_URL, request)
    sendMessageTo(c.DNDBEYOND_SPELL_URL, request)
    sendMessageTo(c.DNDBEYOND_VEHICLE_URL, request)

def addFVTTTab(tab):
    nonlocal fvtt_tabs
    for t in fvtt_tabs:
        if t.id == tab.id:
            return
    fvtt_tabs.append(tab)
    console.log("Added ", tab.id, " to fvtt tabs.")

def removeFVTTTab(id):
    nonlocal fvtt_tabs

    for t in fvtt_tabs:
        if t.id == id:
            fvtt_tabs.remove(t)
            console.log("Removed ", id, " from fvtt tabs.")
            return

def onRollFailure(request, sendResponse):
    console.log("Failure to find a VTT")
    chrome.tabs.query({"url": c.FVTT_URL}, def(tabs):
        found = False
        for tab in tabs:
            if isFVTT(tab.title):
                found = True
                break
        console.log("Found FVTT tabs : ", found, tabs)
        # Don't show the same message if the tab is active but doesn't match the settings
        if fvtt_tabs.length > 0:
            found = False
        if found:
            sendResponse({"success": False, "vtt": None, "request": request, \
                 "error": "Found a Foundry VTT tab that has not been activated. Please click on the Beyond20 icon in the browser's toolbar of that tab in order to give Beyond20 access."})
        else:
            sendResponse({"success": False, "vtt": None, "request": request, \
                 "error": "No VTT found that matches your settings. Open a VTT window, or check that the settings don't restrict access to a specific campaign."})
    )

def onMessage(request, sender, sendResponse):
    nonlocal settings

    console.log("Received message: ", request)
    if request.action in ["roll", "hp-update"]:
        makeFailureCB = def(trackFailure, vtt, sendResponse):
            return def(result):
                trackFailure[vtt] = result
                console.log("Result of sending to VTT ", vtt, ": ", result)
                if trackFailure["roll20"] is not None and trackFailure["fvtt"] is not None:
                    if trackFailure["roll20"] == True and trackFailure["fvtt"] == True:
                        onRollFailure(request, sendResponse)
                    else:
                        vtts = []
                        for key in trackFailure:
                            if not trackFailure[key]:
                                vtts.append(key)
                        sendResponse({"success": True, "vtt": vtts, "error": None})
        trackFailure = {"roll20": None, "fvtt": None}
        if settings["vtt-tab"] == "dndbeyond":
            sendResponse({"success": True, "vtt": "dndbeyond", "error": None, "request": request})
        sendMessageToRoll20(request, settings["vtt-tab"], failure=makeFailureCB(trackFailure, "roll20", sendResponse))
        sendMessageToFVTT(request, settings["vtt-tab"], failure=makeFailureCB(trackFailure, "fvtt", sendResponse))
        return True
    elif request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
        sendMessageToRoll20(request)
        sendMessageToBeyond(request)
        sendMessageToFVTT(request)
    elif request.action == "activate-icon":
        # popup doesn't have sender.tab so we grab it from the request.
        tab = request.tab or sender.tab
        # Using browserAction on Chrome but pageAction on Firefox
        if getBrowser() == "Chrome":
            chrome.browserAction.setPopup({"tabId": tab.id, "popup": "popup.html"})
        else:
            chrome.pageAction.show(tab.id)
        if isFVTT(tab.title):
            injectFVTTScripts(tab)

    elif request.action == "register-fvtt-tab":
        addFVTTTab(sender.tab)
    elif request.action == "reload-me":
        chrome.tabs.reload(sender.tab.id)
    return False

def injectFVTTScripts(tab):
    insertCSSs([tab], ["libs/css/alertify.css", "libs/css/alertify-themes/default.css", "libs/css/alertify-themes/beyond20.css"])
    executeScripts([tab], ["libs/alertify.min.js", "libs/jquery-3.4.1.min.js", "src/fvtt.js"])

def insertCSSs(tabs, css_files):
    for tab in tabs:
        for file in css_files:
            chrome.tabs.insertCSS(tab.id, {"file": file})

def executeScripts(tabs, js_files):
    for tab in tabs:
        for file in js_files:
            chrome.tabs.executeScript(tab.id, { "file": file })

def onTabsUpdated(id, changes, tab):
    nonlocal fvtt_tabs

    if id in fvtt_tabs and \
        ("url" in changes and not urlMatches(changes["url"], "*://*/game")) or \
        ("status" in changes and changes["status"] == "loading"):
        removeFVTTTab(id)

def onTabRemoved(id, info):
    removeFVTTTab(id)

def browserActionClicked(tab):
    chrome.tabs.executeScript(tab.id, { "file": "src/fvtt_test.js" })

updateSettings()
chrome.runtime.onMessage.addListener(onMessage)
chrome.tabs.onUpdated.addListener(onTabsUpdated)
chrome.tabs.onRemoved.addListener(onTabRemoved)

if getBrowser() == "Chrome":
    chrome.browserAction.onClicked.addListener(browserActionClicked)
    manifest = chrome.runtime.getManifest()
    for script in manifest.content_scripts:
        cb = def(js_files, css_files):
            return def(tabs):
                if js_files:
                    executeScripts(tabs, js_files)
                if css_files:
                    insertCSSs(tabs, css_files)
        chrome.tabs.query({ "url": script.matches}, cb(script.js, script.css))

