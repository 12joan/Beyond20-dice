from utils import replaceRolls, addCustomEventListener, injectCSS

settings = None

injectCSS("""
.tooltip .tooltiptext {
  visibility: hidden;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 10px;
  margin: 10px;

  /* Position the tooltip */
  position: relative;
  z-index: 1;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
}
""")

def getSpeakerByName(name):
    low_name = name.toLowerCase()
    actor = game.actors.entities.find(def(actor):
                                          return actor.data.name.toLowerCase() == low_name
                                      )
    return ChatMessage.getSpeaker({"actor": actor, "alias": name})

def postChatMessage(message, character=None, whisper=False):
    data = {"content": message, 
            "user": game.user._id,
            "speaker": getSpeakerByName(character)}
    if whisper:
        data["whisper"] = ChatMessage.getWhisperIDs("GM")
    ChatMessage.create(data)

def postDescription(title, character, source, attributes, description, rolls={}, whisper=False):
    style = "margin: 2px 0px; border: 1px solid #333; width: 100%; border-spacing: 0; border-collapse: collapse; background-color: #DDD;"

    html = "<details><summary><a><font style='color: #A00; font-size: 1.25em;'>" + title + "</font></a></summary>"
    roll_style = ""
    if source or attributes.length > 0:
        html += "<table style='" + style + "'>"
        if source:
            html += "<tr><td colspan'2'><i>" + source + "</i></td></tr>"
        for attr in attributes:
            html += "<tr><td><b>" + attr + "</b></td><td>" + attributes[attr] + "</td></tr>"
        html += "</table>"
    html += "<div style='" + style + "'>" + description.replace("\n", "</br>") + "</div></details>"
    for roll in rolls:
        r = rolls[roll]
        roll_html = "<span class='tooltip'>" + r.total + "<span class='tooltiptext'>" + r.formula + " = " +  r.result + "</span></span>"
        html += "<b>" + roll + ": </b>" + roll_html + "</br>"

    postChatMessage(html, character, whisper)


def rolldice(title, character, dice, data, whisper=False):
    if whisper:
        rollMode = "gmroll"
    else:
        rollMode = "roll"
    new_data = {}
    parts = [dice]
    for key in data:
        if data[key] != "":
            new_key = key.replace("_", "").toLowerCase()
            new_data[new_key] = data[key]
            parts.append(new_key)
    roll = new Roll(parts.join(" + @"), new_data)

    roll.toMessage({"speaker": getSpeakerByName(character),
                    "flavor": title,
                    "rollMode": rollMode})
    return roll

def rolld20(title, character, data, whisper=False, advantage=False):
    dice = "2d20kh" if advantage else "1d20"
    return rolldice(title, character, dice, data, whisper)
    
def rollSkill(request, custom_roll_dice=""): 
    nonlocal settings

    data = {request.ability: request.modifier, "custom_dice": custom_roll_dice}
    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    advantage = request.character.type == "Character" and \
        request.ability == "STR" and \
        "Rage" in request.character["class-features"] and \
        request.character.settings["barbarian-rage"]
    rolld20(request.skill, request.character.name, data, whisper, advantage)

def rollAbility(request, custom_roll_dice=""): 
    nonlocal settings

    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    advantage = request.character.type == "Character" and \
        request.ability == "STR" and \
        "Rage" in request.character["class-features"] and \
        request.character.settings["barbarian-rage"]
    data = {request.ability: request.modifier, "custom_dice": custom_roll_dice}
    if request["JoaT"]?:
        data["jack_of_all_trades"] = request["JoaT"]
    rolld20(request.name, request.character.name, data, whisper, advantage)

def rollSavingThrow(request, custom_roll_dice=""): 
    nonlocal settings

    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    advantage = request.character.type == "Character" and \
        request.ability == "STR" and \
        "Rage" in request.character["class-features"] and \
        request.character.settings["barbarian-rage"]
    data = {request.ability: request.modifier, "custom_dice": custom_roll_dice}
    if request["JoaT"]?:
        data["jack_of_all_trades"] = request["JoaT"]
    rolld20(request.name + " Save", request.character.name, data, whisper, advantage)
  
def rollInitiative(request, custom_roll_dice=""):
    nonlocal settings

    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    data = {"initiative": request.initiative, "custom_dice": custom_roll_dice}
    rolld20("Initiative", request.character.name, data, whisper, request.advantage)

def rollHitDice(request):
    if request.multiclass:
        rname = "Hit Dice (" + request.class + ")"
    else:
        rname = "Hit Dice"

    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    rolldice(rname, request.character.name, request["hit-dice"], {}, whisper)

def rollDeathSave(request, custom_roll_dice=""):
    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    rolld20("Death Saving Throw", request.character.name, {}, whisper)

def rollTrait(request):
    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    if request["source-type"]?:
        source = request["source-type"]
        if request.source.length > 0:
            source += ": " + request.source
    elif request["item-type"]?:
        source = request["item-type"]
    else:
        source = request.type

    postDescription(request.name, request.character.name, source, {}, request.description, {}, whisper)


def rollSpellCard(request):
    nonlocal settings

    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]

    data = {"Casting Time": request["casting-time"],
            "Range": request.range,
            "Duration": request.duration,
            "Components": request.components}

    if request["cast-at"]?:
        source = request["level-school"] + "(Cast at " + request["cast-at"] + " Level)"
    else:
        source = request["level-school"]
                                                    
    
    if request.ritual:
        data["Ritual"] = "Can be cast as a ritual"
    if request.concentration:
        properties["Concentration"] = "Requires Concentration"
    description = request.description.replace("At Higher Levels.", "<b>At Higher levels.</b>")
    postDescription(request.name, request.character.name, source, data, description, {}, whisper)


def rollAttack(request, custom_roll_dice=""):
    nonlocal settings

    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]
    rolls = {}
    if request["to-hit"]?:
        rolls["To Hit"] = new Roll("1d20 + " + request["to-hit"]).roll()
    if request.damages?:
        for i in range(request.damages.length):
            rolls[request["damage-types"][i]] = new Roll(request.damages[i]).roll()
    postDescription(request.name, request.character.name, None, {}, request.description? "", rolls, whisper)

def handleRoll(request, new_settings):
    nonlocal settings

    settings = new_settings
    whisper = (request.character.type == "Monster" and settings["whisper-monsters"]) or settings["whispers"]

    custom_roll_dice = ""
    if request.character.type == "Character":
        custom_roll_dice = request.character.settings["custom-roll-dice"] ? ""
    if request.type == "skill":
        rollSkill(request, custom_roll_dice)
    elif request.type == "ability":
        rollAbility(request, custom_roll_dice)
    elif request.type == "saving-throw":
        rollSavingThrow(request, custom_roll_dice)
    elif request.type == "initiative":
        rollInitiative(request, custom_roll_dice)
    elif request.type == "hit-dice":
        rollHitDice(request)
    elif request.type in ["item", "feature", "trait", "action"]:
        rollTrait(request)
    elif request.type == "death-save":
        rollDeathSave(request, custom_roll_dice)
    elif request.type == "attack":
        rollAttack(request, custom_roll_dice)
    elif request.type == "spell-card":
        rollSpellCard(request)
    elif request.type == "spell-attack":
        rollSpellAttack(request, custom_roll_dice)
    else:
        # 'custom' or anything unexpected
        mod = request.modifier if request.modifier? else request.roll
        rname = request.name if request.name? else request.type

        chatOptions = {"speaker": getSpeakerByName(request.character.name),
                       "flavor": rname}
        if whisper:
            chatOptions["whisper"] = ChatMessage.getWhisperIDs("GM")
        roll = new Roll(request.roll).roll()
        roll.toMessage(chatOptions)

def updateHP(name, current, total=None):
    console.log("Updating HP for " + name + " : " + current + "/" + total)
    name = name.toLowerCase()

    tokens = canvas.tokens.controlledTokens.filter(def(t):
                                                       return t.data.name.toLowerCase() == name
                                                   )
    for token in tokens:
        if token.actor and token.data.actorLink:
            total = total if total else token.actor.data.attributes.hp.max
            token.actor.update({"data.attributes.hp.value" : current,
                                "data.attributes.hp.max" : total})
        else:
            if token.data.bar1.attribute == "attributes.hp":
                prefix = "bar1"
                total = total if total else token.data.bar1.max
            elif token.data.bar2.attribute == "attributes.hp":
                prefix = "bar2"
                total = total if total else token.data.bar2.max
            else:
                prefix = None
            if prefix:
                token.update(canvas.id, {prefix + ".value": current,
                                         prefix + ".max": total})

def disconnectAllEvents():
    nonlocal registered_events
    
    for event in registered_events:
        document.removeEventListener(*event)

console.log("Beyond20: FVTT Page Script loaded")
registered_events = []
registered_events.append(addCustomEventListener("Roll", handleRoll))
registered_events.append(addCustomEventListener("UpdateHP", updateHP))
registered_events.append(addCustomEventListener("disconnect", disconnectAllEvents))
