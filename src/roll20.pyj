from utils import replaceRolls, injectPageScript, sendCustomEvent, escapeRoll20Macro
from settings import getDefaultSettings, getStoredSettings
import re
import math

print("Beyond20: Roll20 module loaded.")

chat = document.getElementById("textchat-input")
txt = chat.getElementsByTagName("textarea")[0]
btn = chat.getElementsByTagName("button")[0]
speakingas = document.getElementById("speakingas")
settings = getDefaultSettings()

def postChatMessage(message, character=None):
    nonlocal txt, btn, speakingas

    set_speakingas = True
    old_as = speakingas.value
    if character:
        character = character.toLowerCase()
        for i in range(speakingas.children.length):
            if speakingas.children[i].text.toLowerCase() == character:
                speakingas.children[i].selected = True
                set_speakingas = False
                break
    if set_speakingas:
        speakingas.children[0].selected = True
    old_text = txt.value
    txt.value = message
    btn.click()
    txt.value = old_text
    speakingas.value = old_as

def genRoll(dice, modifiers={}):
    roll = "[[" + dice
    for m in modifiers:
        mod = modifiers[m]
        if len(mod) > 0:
            if mod[0] == '+' or mod[0] == '-' or mod[0] == '?' or mod[0] == '&':
                roll += " " + mod
            else:
                roll += "+" + mod
            if len(m) > 0:
                roll += "[" + m + "]"
    roll += "]]"
    return roll

def subRolls(text, damage_only=False, overrideCB=None):
    if overrideCB:
        replaceCB = overrideCB
    else:
        replaceCB = def(dice_formula, modifier):
            if modifier:
                dice_formula = "1d20" + dice_formula
            return genRoll(dice_formula)
    
    text = replaceRolls(False, text, replaceCB)
    if damage_only:
        return text
    return replaceRolls(True, text, replaceCB)

def subDescriptionRolls(request, description):
    nonlocal settings
    if not settings["subst-roll20"]:
        return description
    replaceCB = def(dice_formula, modifier):
        roll = ("1d20" + dice_formula) if modifier else dice_formula
        roll_template = template("simple", {"charname": request.character.name,
                                            "rname" : request.name,
                                            "mod": dice_formula,
                                            "r1": genRoll(roll),
                                            "normal": 1})
        return "[" + dice_formula + "](!\n" + escapeRoll20Macro(roll_template) + ")"
    return subRolls(description, overrideCB=replaceCB)

def subDamageRolls(text):
    return subRolls(text, damage_only=True)

def damagesToCrits(damages):
    nonlocal settings
    
    crits = []
    for damage in damages:
        match = re.search("[0-9]*d[0-9]+", damage)
        if match?:
                crits.append(match.group(0))
        else:
            crits.append("")
    return crits

def damagesToRollProperties(damages, damage_types, brutal=0):
    nonlocal settings

    properties = {"damage": 1,
                  "dmg1flag": 1}
    crits = damagesToCrits(damages)
    if brutal > 0:
        dice = []
        for dmg in crits:
            match = re.search("[0-9]*d([0-9]+)", dmg)
            if match?:
                die = str(brutal) + "d" + match.group(1)
                if die not in dice:
                    dice.append(die)
        if dice.length == 1:
            brutal_dmg = "[[" + dice[0] + "]]"
        elif dice.length > 1:
            brutal_dmg = "?{Choose which extra dice to roll for your Brutal/Savage critical attack"
            for die in dice:
                brutal_dmg += "|" + die + ",[[" + die + "]]"
            brutal_dmg += "}"
    properties["dmg1"] = subDamageRolls(damages[0])
    properties["dmg1type"] = damage_types[0]
    properties["crit1"] = settings["crit-prefix"] + subDamageRolls(crits[0])
    if brutal_dmg?:
        properties["crit1"] += " + " + brutal_dmg + "(Brutal)"
    if len(damages) > 1:
        properties["dmg2flag"] = 1
        properties["dmg2"] = subDamageRolls(str.join(" | ", list(damages[1:])))
        properties["dmg2type"] = str.join(" | ", damage_types[1:])
        properties["crit2"] = settings["crit-prefix"] + subDamageRolls(str.join(" | ", crits[1:]))

    return properties

def template(name, properties):
    nonlocal settings

    if properties["normal"]?:
        del properties["r2"]

    if settings["template"] == "default":
        name = "default"

        # Keeps the order of properties
        renameProp = def(old_key, new_key):
            nonlocal properties
            new_properties = {}
            for key in properties:
                new_properties[new_key if key == old_key else key] = properties[key]
            properties = new_properties

        renameProp("charname", "Character name")
        renameProp("rname", "name")
        if properties["r2"]?:
            renameProp("r1", "Regular Roll")
            renameProp("r2", "Roll with [Dis]Advantage")
        else:
            renameProp("r1", "Dice Roll")
        renameProp("mod", "Modifier")
        if properties["dmg2"]?:
            renameProp("dmg1", "First Damage")
            renameProp("dmg1type", "First Damage Type")
            renameProp("crit1", "First Crit Damage IF Critical")
            renameProp("dmg2", "Second Damage")
            renameProp("dmg2type", "Second Damage Type")
            renameProp("crit2", "Second Crit Damage IF Critical")
        if properties["dmg1"]?:
            renameProp("dmg1", "Damage")
            renameProp("dmg1type", "Damage Type")
            renameProp("crit1", "Crit Damage IF Critical")
        renameProp("saveattr", "Save Ability")
        renameProp("savedc", "Save DC")
        renameProp("athigherlevels", "At Higher Levels")
        renameProp("castingtime", "Casting Time")
        renameProp("hldmg", "Higher level cast")

        del properties["attack"]
        del properties["damage"]
        del properties["save"]
        del properties["dmg1flag"]
        del properties["dmg2flag"]
        del properties["always"]
        del properties["normal"]
        del properties["advantage"]
            

    if settings["whispers"]:
        result = "/w gm "
    else:
        result = ""
    result += "&{template:" + name + "}"
    for key in properties:
        result += " {{" + key + "=" + properties[key] + "}}"
    return result

def advantageType():
    nonlocal settings

    if settings["roll-advantage"]:
        return "always"
    else:
        return "normal"

def rollSkill(request, custom_roll_dice=""):
    modifier = request.modifier
    advantage_type = advantageType()
    if request.character.type == "Character" and \
            request.ability == "STR" and \
            "Rage" in request.character["class-features"] and \
            request.character.settings["barbarian-rage"]:
        advantage_type = "advantage"
    # Custom skill
    if modifier == "--" and request.character.abilities.length > 0:
        modifier = "?{Choose Ability"
        # [name, abbr, value, mod]
        for ability in request.character.abilities:
            modifier += "|" + ability[0] + ", " + ability[3]
        modifier += "}"
        prof = ""
        prof_val = ""
        if request.proficiency == "Proficiency":
            prof = "PROF"
            prof_val += request.character.proficiency
        elif request.proficiency == "Half Proficiency":
            prof = "HALF-PROFICIENCY"
            prof_val += "+[[floor(" + request.character.proficiency + " / 2)]]"
        elif request.proficiency == "Expertise":
            prof = "EXPERTISE"
            prof_val += "+[[" + request.character.proficiency + " * 2]]"
        return template("simple",
                         {"charname": request.character.name,
                          "rname" : request.skill,
                          "mod": "[[" + modifier + prof_val + "]]",
                          "r1": genRoll("1d20", {"--": modifier, prof: prof_val, "CUSTOM": custom_roll_dice}),
                          "r2": genRoll("1d20", {"--": modifier, prof: prof_val, "CUSTOM": custom_roll_dice}),
                          advantage_type:1})
    else:
        return template("simple",
                         {"charname": request.character.name,
                          "rname" : request.skill,
                          "mod": modifier,
                          "r1": genRoll("1d20", {request.ability: modifier, "CUSTOM": custom_roll_dice}),
                          "r2": genRoll("1d20", {request.ability: modifier, "CUSTOM": custom_roll_dice}),
                          advantage_type:1})

def rollAbility(request, custom_roll_dice=""):
    if request["JoaT"]?:
        joat = "+" + request["JoaT"]
        dice_roll = genRoll("1d20", {request.ability: request.modifier, "JoaT": joat, "CUSTOM": custom_roll_dice})
        modifier = request.modifier + " " + joat
    else:
        dice_roll = genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice})
        modifier = request.modifier
    advantage_type = advantageType()
    if request.character.type == "Character" and \
            request.ability == "STR" and \
            "Rage" in request.character["class-features"] and \
            request.character.settings["barbarian-rage"]:
        advantage_type = "advantage"
    return template("simple",
                    {"charname": request.character.name,
                     "rname" : request.name,
                     "mod": modifier,
                     "r1": dice_roll,
                     "r2": dice_roll,
                     advantage_type:1})

def rollSavingThrow(request, custom_roll_dice=""):
    advantage_type = advantageType()
    if request.character.type == "Character" and \
            request.ability == "STR" and \
            "Rage" in request.character["class-features"] and \
            request.character.settings["barbarian-rage"]:
        advantage_type = "advantage"
    return template("simple",
                    {"charname": request.character.name,
                     "rname" : request.name + " Save",
                     "mod": request.modifier,
                     "r1": genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice}),
                     "r2": genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice}),
                     advantage_type:1})

def rollInitiative(request, custom_roll_dice=""):
    nonlocal settings

    roll_properties = {"charname": request.character.name,
                       "rname" : "Initiative",
                       "mod": request.initiative}
    if settings["initiative-tracker"]:
        dice = "2d20kh1" if request.advantage else "1d20"
        roll_properties["r1"] = genRoll(dice, {"INIT": request.initiative, "CUSTOM": custom_roll_dice, "": "&{tracker}"})
        roll_properties["normal"] = 1
    else:
        dice_formula = genRoll("1d20", {"INIT": request.initiative, "CUSTOM": custom_roll_dice})
        roll_properties["r1"] = dice_formula
        if request.advantage:
            roll_properties["r2"] = dice_formula
        roll_properties["advantage" if request.advantage else "normal"] = 1
    return template("simple", roll_properties)

def rollHitDice(request):
    if request.multiclass:
        rname = "Hit Dice (" + request.class + ")"
    else:
        rname = "Hit Dice"

    return template("simple",
                    {"charname": request.character.name,
                     "rname" : rname,
                     "mod": request["hit-dice"],
                     "r1": subRolls(request["hit-dice"]),
                     "normal": 1})

def rollDeathSave(request, custom_roll_dice=""):
    return template("simple", {"charname": request.character.name,
                               "rname" : "Death Saving Throw",
                               "r1": genRoll("1d20cs>10cf<9", {"CUSTOM": custom_roll_dice}),
                               "normal": 1})

def rollTrait(request):
    if request["source-type"]?:
        source = request["source-type"]
        if request.source.length > 0:
            source += ": " + request.source
    elif request["item-type"]?:
        source = request["item-type"]
    else:
        source = request.type
    return template("traits", {"charname": request.character.name,
                               "name": request.name,
                               "source": source,
                               "description": subDescriptionRolls(request, request.description)})

def rollAttack(request, custom_roll_dice=""):
    nonlocal settings

    properties = {"charname": request.character.name,
                  "rname" : request.name}
    template_type = "atkdmg"
    dmg_props = {}
    if request["to-hit"]?:
        d20_roll = "1d20"
        if request["attack-source"] == "item":
            if request.character.type == "Character" and \
                    "Improved Critical" in request.character["class-features"]:
                d20_roll = "1d20cs>19"
            if request.character.type == "Character" and \
                    "Superior Critical" in request.character["class-features"]:
                d20_roll = "1d20cs>18"
        properties["mod"] = request["to-hit"]
        properties["r1"] = genRoll(d20_roll, {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties["r2"] = genRoll(d20_roll, {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties[advantageType()] = 1
        properties["attack"] = 1
    if request.damages?:
        damages = list(request.damages)
        damage_types = list(request["damage-types"])
        brutal = 0
        if request.character.type == "Character" and \
                request["attack-type"] == "Melee":
            if request.character.settings["brutal-critical"]:
                if "Brutal Critical" in request.character["class-features"]:
                    barbarian_level = request.character.classes["Barbarian"]
                    brutal += 1 + math.floor((barbarian_level - 9) / 4)
                if "Savage Attacks" in request.character["racial-traits"]:
                    brutal += 1
            if "Rage" in request.character["class-features"] and \
                    request.character.settings["barbarian-rage"]:
                barbarian_level = request.character.classes["Barbarian"]
                rage_damage = 2 if barbarian_level < 9 else (3 if barbarian_level < 16 else 4)
                damages[0] += " + " + rage_damage
                damage_types[0] += " | Rage"
        dmg_props = damagesToRollProperties(damages, damage_types, brutal)
    if request.range?:
        properties["range"] = request.range
    if request["save-dc"]?:
        dmg_props["save"] = 1
        dmg_props["saveattr"] = request["save-ability"]
        dmg_props["savedc"] = request["save-dc"]

    if request.damages? and request["to-hit"]? and not settings["auto-roll-damage"]:
        template_type = "atk"
        whisper = "/w gm " if (request.character.type == "Monster" and settings["whisper-monsters"]) else ""
        dmg_props["charname"] = request.character.name
        dmg_props["rname"] = request.name
        dmg_props["crit"] = 1
        dmg_template_crit = template("dmg", dmg_props)
        del dmg_props["crit"]
        del dmg_props["crit1"]
        del dmg_props["crit2"]
        dmg_template = template("dmg", dmg_props)
        properties["rname"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(whisper + dmg_template) + ")"
        properties["rnamec"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(whisper + dmg_template_crit) + ")"
    else:
        for key in dmg_props:
            properties[key] = dmg_props[key]

    return template(template_type, properties)

def rollSpellCard(request):
    properties = {"charname": request.character.name,
                  "name": request.name,
                  "castingtime": request["casting-time"],
                  "range": request.range,
                  "duration": request.duration}

    if request["cast-at"]?:
        properties["level"] = request["level-school"] + "(Cast at " + request["cast-at"] + " Level)"
    else:
        properties["level"] = request["level-school"]
                                                    
    components = request.components
    while components != "":
        if components[0] == "V":
            properties["v"] = 1
            components = components[1:]
        elif components[0] == "S":
            properties["s"] = 1
            components = components[1:]
        elif components[0] == "M":
            properties["m"] = 1
            properties["material"] = components[2:-1]
            components = ""
        if components.startsWith(", "):
            components = components[2:]
    if request.ritual:
        properties["ritual"] = 1
    if request.concentration:
        properties["concentration"] = 1
    description = request.description            
    higher = description.indexOf("At Higher Levels.")
    if higher > 0:
        properties["description"] = subDescriptionRolls(request, description[:higher-1])
        properties["athigherlevels"] = subDescriptionRolls(request, description[higher+"At Higher Levels.".length:])
    else:
        properties["description"] = subDescriptionRolls(request, description)

    return template("spell", properties)

def rollSpellAttack(request, custom_roll_dice):
    properties = {"charname": request.character.name,
                  "rname" : request.name}
    template_type = "atkdmg"
    dmg_props = {}
    if request["to-hit"]?:
        properties["mod"] = request["to-hit"]
        properties["r1"] = genRoll("1d20", {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties["r2"] = genRoll("1d20", {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties[advantageType()] = 1
        properties["attack"] = 1
    if request.damages?:
        damages = list(request.damages)
        damage_types = list(request["damage-types"])
        if request.name == "Chromatic Orb":
            chromatic_type = "?{Choose damage type"
            for dmgtype in ["Acid", "Cold", "Fire", "Lightning", "Poison", "Thunder"]:
                idx = damage_types.index(dmgtype)
                chromatic_damage = damages.pypop(idx)
                damage_types.pypop(idx)
                chromatic_type += "|" + dmgtype
            chromatic_type += "}"
            damages.insert(0, chromatic_damage)
            damage_types.insert(0, chromatic_type)
        dmg_props = damagesToRollProperties(damages, damage_types)
    if request.range?:
        properties["range"] = request.range
    if request["save-dc"]?:
        dmg_props["save"] = 1
        dmg_props["saveattr"] = request["save-ability"]
        dmg_props["savedc"] = request["save-dc"]
    if request["cast-at"]?:
        dmg_props["hldmg"] = genRoll(request["cast-at"][0]) + request["cast-at"][1:] + " Level"
    components = request.components
    if settings["components-display"] == "all":
        if components != "":
            properties["desc"] = settings["component-prefix"] + components
            components = ""
    elif settings["components-display"] == "material":
        while components != "":
            if components[0] in ["V", "S"]:
                components = components[1:]
                if components.startsWith(", "):
                    components = components[2:]
            if components[0] == "M":
                properties["desc"] = settings["component-prefix"] + components[2:-1]
                components = ""

    if request.damages? and request["to-hit"]? and not settings["auto-roll-damage"]:
        whisper = "/w gm " if (request.character.type == "Monster" and settings["whisper-monsters"]) else ""
        template_type = "atk"
        dmg_props["charname"] = request.character.name
        dmg_props["rname"] = request.name
        dmg_props["crit"] = 1
        dmg_template_crit = template("dmg", dmg_props)
        del dmg_props["crit"]
        del dmg_props["crit1"]
        del dmg_props["crit2"]
        dmg_template = template("dmg", dmg_props)
        properties["rname"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(whisper + dmg_template) + ")"
        properties["rnamec"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(whisper + dmg_template_crit) + ")"
    else:
        for key in dmg_props:
            properties[key] = dmg_props[key]

    roll = template(template_type, properties)
    return roll

def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
        )

def handleMessage (request, sender, sendResponse):
    nonlocal settings
    print("Got message : ", request)
    if request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
    elif request.action == "hp-update":
        if settings["update-hp"]:
            sendCustomEvent("UpdateHP", (request.character.name, request.character.hp, request.character["max-hp"]))
    elif request.action == "roll":
        roll = "/w gm " if (request.character.type == "Monster" and settings["whisper-monsters"]) else ""
        if request.character.type == "Character":
            custom_roll_dice = request.character.settings["custom-roll-dice"] ? ""
            custom_roll_dice = re.sub("([0-9]*d[0-9]+)", "\\1cs>100cf<0", custom_roll_dice)
        else:
            custom_roll_dice = ""
        if request.type == "skill":
            roll += rollSkill(request, custom_roll_dice)
        elif request.type == "ability":
            roll += rollAbility(request, custom_roll_dice)
        elif request.type == "saving-throw":
            roll += rollSavingThrow(request, custom_roll_dice)
        elif request.type == "initiative":
            roll += rollInitiative(request, custom_roll_dice)
        elif request.type == "hit-dice":
            roll += rollHitDice(request)
        elif request.type in ["item", "feature", "trait", "action"]:
            roll += rollTrait(request)
        elif request.type == "death-save":
            roll += rollDeathSave(request, custom_roll_dice)
        elif request.type == "attack":
            roll += rollAttack(request, custom_roll_dice)
        elif request.type == "spell-card":
            roll += rollSpellCard(request)
        elif request.type == "spell-attack":
            roll += rollSpellAttack(request, custom_roll_dice)
        else:
            # 'custom' or anything unexpected
            mod = request.modifier if request.modifier? else request.roll
            rname = request.name if request.name? else request.type
            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : rname,
                              "mod": mod,
                              "r1": subRolls(request.roll),
                              "normal": 1})
        postChatMessage(roll, request.character.name)

chrome.runtime.onMessage.addListener(handleMessage)
updateSettings()
chrome.runtime.sendMessage({"action": "activate-icon"});
sendCustomEvent("disconnect")
injectPageScript(chrome.runtime.getURL('src/roll20_script.js'))
