from utils import replaceRolls, injectPageScript, sendCustomEvent
from settings import getDefaultSettings, getStoredSettings

print("Beyond20: Roll20 module loaded.")

chat = document.getElementById("textchat-input")
txt = chat.getElementsByTagName("textarea")[0]
btn = chat.getElementsByTagName("button")[0]
speakingas = document.getElementById("speakingas")
settings = getDefaultSettings()

def postChatMessage(message, character=None):
    nonlocal txt, btn, speakingas

    set_speakingas = True
    old_as = speakingas.value
    if character:
        character = character.toLowerCase()
        for i in range(speakingas.children.length):
            if speakingas.children[i].text.toLowerCase() == character:
                speakingas.children[i].selected = True
                set_speakingas = False
                break
    if set_speakingas:
        speakingas.children[0].selected = True
    old_text = txt.value
    txt.value = message
    btn.click()
    txt.value = old_text
    speakingas.value = old_as

def genRoll(dice, modifiers=[]):
    roll = "[[" + dice
    for m in modifiers:
        mod = modifiers[m]
        if len(mod) > 0:
            if mod[0] == '+' or mod[0] == '-' or mod[0] == '?' or mod[0] == '&':
                roll += " " + mod
            else:
                roll += "+" + mod
            if len(m) > 0:
                roll += "[" + m + "]"
    roll += "]]"
    return roll

def subRolls(text, keep_original=False, damage_only=False):
    if keep_original:
        pre_original="["
        post_original="]"
        pre_dice="(!&#13;&#91;&#91;"
        post_dice="&#93;&#93;)"
    else:
        pre_original=""
        post_original=""
        pre_dice="[["
        post_dice="]]"
    text = replaceRolls(False, text, keep_original, pre_original, post_original, pre_dice, post_dice)
    if damage_only:
        return text
    return replaceRolls(True, text, keep_original, pre_original, post_original, pre_dice + "1d20", post_dice)

def subDescriptionRolls(description):
    nonlocal settings
    if not settings["subst-roll20"]:
        return description
    return subRolls(description, True)

def subDamageRolls(text):
    return subRolls(text, damage_only=True)

def template(name, properties):
    nonlocal settings

    if properties["normal"]?:
        del properties["r2"]

    if settings["template"] == "default":
        name = "default"

        # Keeps the order of properties
        renameProp = def(old_key, new_key):
            nonlocal properties
            new_properties = {}
            for key in properties:
                new_properties[new_key if key == old_key else key] = properties[key]
            properties = new_properties
            
        if not settings["roll-advantage"]:
            del properties["r2"]
        renameProp("rname", "name")
        if properties["r2"]?:
            renameProp("r1", "Regular Roll")
            renameProp("r2", "Roll with [Dis]Advantage")
        else:
            renameProp("r1", "Dice Roll")
        renameProp("mod", "Modifier")
        if properties["dmg2"]?:
            renameProp("dmg1", "First Damage")
            renameProp("dmg1type", "First Damage Type")
            renameProp("crit1", "First Damage IF Critical")
            renameProp("dmg2", "Second Damage")
            renameProp("dmg2type", "Second Damage Type")
            renameProp("crit2", "Second Damage IF Critical")
        if properties["dmg1"]?:
            renameProp("dmg1", "Damage")
            renameProp("dmg1type", "Damage Type")
            renameProp("crit1", "Damage IF Critical")
        renameProp("saveattr", "Save Ability")
        renameProp("savedc", "Save DC")
        renameProp("athigherlevels", "At Higher Levels")
        renameProp("castingtime", "Casting Time")
        renameProp("hldmg", "Higher level cast")

        del properties["attack"]
        del properties["damage"]
        del properties["save"]
        del properties["dmg1flag"]
        del properties["dmg2flag"]
        del properties["always"]
        del properties["normal"]
        del properties["advantage"]
            

    result = "&{template:" + name + "}"
    for key in properties:
        result += " {{" + key + "=" + properties[key] + "}}"
    return result

def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
        )

def handleMessage (request, sender, sendResponse):
    nonlocal settings
    print("Got message : " + str(request))
    if request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
    elif request.action == "hp-update":
        sendCustomEvent("UpdateHP", (request.character.name, request.character.hp, request.character["max-hp"]))
    elif request.action == "roll":
        if settings["whispers"]:
            roll = "/w gm "
        else:
            roll = ""
        if settings["roll-advantage"]:
            advantage_type = "always"
        else:
            advantage_type = "normal"
        if request.type == "skill":
            modifier = request.modifier
            # Custom skill
            if modifier == "--" and request.character.abilities.length > 0:
                modifier = "?{Choose Ability"
                # [name, abbr, value, mod]
                for ability in request.character.abilities:
                    modifier += "|" + ability[0] + ", " + ability[3]
                modifier += "}"
                prof = ""
                prof_val = ""
                if request.proficiency == "Proficiency":
                    prof = "PROF"
                    prof_val += request.character.proficiency
                elif request.proficiency == "Half Proficiency":
                    prof = "HALF-PROFICIENCY"
                    prof_val += "+[[floor(" + request.character.proficiency + " / 2)]]"
                elif request.proficiency == "Expertise":
                    prof = "EXPERTISE"
                    prof_val += "+[[" + request.character.proficiency + " * 2]]"
                roll += template("simple",
                                 {"charname": request.character.name,
                                  "rname" : request.skill,
                                  "mod": "[[" + modifier + prof_val + "]]",
                                  "r1": genRoll("1d20", {"--": modifier, prof: prof_val}),
                                  "r2": genRoll("1d20", {"--": modifier, prof: prof_val}),
                                  advantage_type:1})
            else:
                roll += template("simple",
                                 {"charname": request.character.name,
                                  "rname" : request.skill,
                                  "mod": modifier,
                                  "r1": genRoll("1d20", {request.ability: modifier}),
                                  "r2": genRoll("1d20", {request.ability: modifier}),
                                  advantage_type:1})
        elif request.type == "ability":
            if "Bard" in request.character.classes and \
                    request.character.classes["Bard"] >= 2 and \
                    request.character.settings["bard-joat"]:
                half_prof = "+[[floor(" + request.character.proficiency + " / 2)]]"
                dice_roll = genRoll("1d20", {request.ability: request.modifier, "JoaT": half_prof})
                modifier = request.modifier + " +[[" + half_prof + "]]"
            else:
                dice_roll = genRoll("1d20", {request.ability: request.modifier})
                modifier = request.modifier
            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : request.name,
                              "mod": modifier,
                              "r1": dice_roll,
                              "r2": dice_roll,
                              advantage_type:1})
        elif request.type == "saving-throw":
            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : request.name + " Save",
                              "mod": request.modifier,
                              "r1": genRoll("1d20", {request.ability: request.modifier}),
                              "r2": genRoll("1d20", {request.ability: request.modifier}),
                              advantage_type:1})
        elif request.type == "initiative":
            roll_properties = {"charname": request.character.name,
                               "rname" : "Initiative",
                               "mod": request.initiative}
            if settings["initiative-tracker"]:
                dice = "2d20kh1" if request.advantage else "1d20"
                roll_properties["r1"] = genRoll(dice, {"INIT": request.initiative, "": "&{tracker}"})
                roll_properties["normal"] = 1
            else:
                dice_formula = genRoll("1d20", {"INIT": request.initiative})
                roll_properties["r1"] = dice_formula
                if request.advantage:
                    roll_properties["r2"] = dice_formula
                roll_properties["advantage" if request.advantage else "normal"] = 1
            roll += template("simple", roll_properties)
        elif request.type == "hit-dice":
            if request.multiclass:
                rname = "Hit Dice (" + request.class + ")"
            else:
                rname = "Hit Dice"

            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : rname,
                              "mod": request["hit-dice"],
                              "r1": subRolls(request["hit-dice"]),
                              "normal": 1})
        elif request.type == "attack":
            crit1 = request.damage.split("+" if "+" in request.damage else "-")[0]
            properties = {"charname": request.character.name,
                          "rname" : request.name}
            if request["to-hit"]?:
                properties["mod"] = request["to-hit"]
                properties["r1"] = genRoll("1d20", {"": request["to-hit"]})
                properties["r2"] = genRoll("1d20", {"": request["to-hit"]})
                properties[advantage_type] = 1
                properties["attack"] = 1
            properties["damage"] =1
            properties["dmg1flag"] = 1
            properties["dmg1"] = subDamageRolls(request.damage)
            properties["dmg1type"] = request["damage-type"]
            properties["crit1"] = subDamageRolls(settings["crit-prefix"] + crit1)
            if request["second-damage"]?:
                crit2 = request["second-damage"].split("+" if "+" in request["second-damage"] else "-")[0]
                properties["dmg2flag"] = 1
                properties["dmg2"] = subDamageRolls(request["second-damage"])
                properties["dmg2type"] = request["second-damage-type"]
                properties["crit2"] = subDamageRolls(settings["crit-prefix"] + crit2)
            if request.range?:
                properties["range"] = request.range
            if request["save-dc"]?:
                properties["save"] = 1
                properties["saveattr"] = request["save-ability"]
                properties["savedc"] = request["save-dc"]
            roll += template("atkdmg", properties)
            if "Rogue" in request.character.classes and \
                    request.character.settings["rogue-sneak-attack"] and \
                    (request["attack-type"] == "Ranged" or (request["properties"]? and "Finesse" in request["properties"])):
                sneak_attack = "[[ceil(" + request.character.classes["Rogue"] + " / 2)]]d6"
                if settings["whispers"]:
                    roll += "\n/w gm "
                else:
                    roll += "\n"
                roll += template("simple",
                                 {"rname" : "Sneak Attack",
                                  "mod": sneak_attack,
                                  "r1": "[[" + sneak_attack + "]]",
                                  "normal": 1})
        elif request.type == "item":
            roll += template("traits", {"name": request.name,
                                        "source": request["item-type"],
                                        "description": subDescriptionRolls(request.description)})
        elif request.type == "feature":
            source = request["source-type"]
            if request.source.length > 0:
                source += ": " + request.source
            roll += template("traits", {"name": request.name,
                                        "source": source,
                                        "description": subDescriptionRolls(request.description)})
        elif request.type in ["trait", "action"]:
            roll += template("traits", {"name": request.name,
                                        "description": subDescriptionRolls(request.description)})
        elif request.type == "spell-card":
            properties = {"name": request.name,
                          "castingtime": request["casting-time"],
                          "range": request.range,
                          "duration": request.duration}

            if request["cast-at"]?:
                properties["level"] = request["level-school"] + "(Cast at " + request["cast-at"] + " Level)"
            else:
                properties["level"] = request["level-school"]
                                                    
            components = request.components
            while components != "":
                if components[0] == "V":
                    properties["v"] = 1
                    components = components[1:]
                elif components[0] == "S":
                    properties["s"] = 1
                    components = components[1:]
                elif components[0] == "M":
                    properties["m"] = 1
                    properties["material"] = components[2:-1]
                    components = ""
                if components.startsWith(", "):
                    components = components[2:]
            if request.ritual:
                properties["ritual"] = 1
            if request.concentration:
                properties["concentration"] = 1
            description = request.description            
            higher = description.indexOf("At Higher Levels.")
            if higher > 0:
                properties["description"] = subDescriptionRolls(description[:higher-1])
                properties["athigherlevels"] = subDescriptionRolls(description[higher+"At Higher Levels.".length:])
            else:
                properties["description"] = subDescriptionRolls(description)

            roll += template("spell", properties)
        elif request.type == "spell-attack":
            properties = {"charname": request.character.name,
                          "rname" : request.name}
            healing_spell = False
            if request["to-hit"]?:
                properties["mod"] = request["to-hit"]
                properties["r1"] = genRoll("1d20", {"": request["to-hit"]})
                properties["r2"] = genRoll("1d20", {"": request["to-hit"]})
                properties[advantage_type] = 1
                properties["attack"] = 1
            if request["damage"]?:
                properties["damage"] = 1
                properties["dmg1flag"] = 1
                properties["dmg1"] = subDamageRolls(request.damage)
                properties["dmg1type"] = request["damage-type"]
                if request["damage-type"] == "Healing":
                    healing_spell = True
                else:
                    crit1 = request.damage.split("+" if "+" in request.damage else "-")[0]
                    properties["crit1"] = subDamageRolls(settings["crit-prefix"] + crit1)
            if request["second-damage"]?:
                properties["dmg2flag"] = 1
                properties["dmg2"] = subDamageRolls(request["second-damage"])
                properties["dmg2type"] = request["second-damage-type"]
                if request["second-damage-type"] == "Healing":
                    healing_spell = True
                else:
                    crit2 = request["second-damage"].split("+" if "+" in request["second-damage"] else "-")[0]
                    properties["crit2"] = subDamageRolls(settings["crit-prefix"] + crit2)
            if request.range?:
                properties["range"] = request.range
            if request["save-dc"]?:
                properties["save"] = 1
                properties["saveattr"] = request["save-ability"]
                properties["savedc"] = request["save-dc"]
            if request["cast-at"]?:
                properties["hldmg"] = genRoll(request["cast-at"][0]) + request["cast-at"][1:] + " Level"
            components = request.components
            while components != "":
                if components[0] in ["V", "S"]:
                    components = components[1:]
                    if components.startsWith(", "):
                        components = components[2:]
                print("Components: " + components)
                if components[0] == "M":
                    properties["desc"] = components[2:-1]
                    components = ""
            roll += template("atkdmg", properties)
            if healing_spell and \
                    "Cleric" in request.character.classes and \
                    request.character.settings["cleric-disciple-life"]:
                if request["cast-at"]?:
                    level = request["cast-at"][0]
                else:
                    level = request["level-school"][0]
                if settings["whispers"]:
                    roll += "\n/w gm "
                else:
                    roll += "\n"
                roll += template("simple",
                                 {"rname" : "Disciple of Life",
                                  "mod": "2 + " + level,
                                  "r1": "[[2 + " + level + "]]",
                                  "normal": 1})
        elif request.type == "death-save":
            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : "Death Saving Throw",
                              "r1": "[[1d20cs>9cf<10]]",
                              "normal": 1})
        elif request.type == "custom":
            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : request.name,
                              "mod": request.roll,
                              "r1": subRolls(request.roll),
                              "normal": 1})
        else:
            roll += template("simple",
                             {"charname": request.character.name,
                              "rname" : request.type,
                              "mod": request.roll,
                              "r1": subRolls(request.roll),
                              "normal": 1})
        postChatMessage(roll, request.character.name)

chrome.runtime.onMessage.addListener(handleMessage)
updateSettings()
chrome.runtime.sendMessage({"action": "activate-icon"});
sendCustomEvent("disconnect")
injectPageScript(chrome.runtime.getURL('src/roll20_script.js'))
