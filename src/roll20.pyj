from utils import replaceRolls, injectPageScript, sendCustomEvent
from settings import getDefaultSettings, getStoredSettings, WhisperType, RollType
from constants import ROLL20_WHISPER_QUERY, ROLL20_ADVANTAGE_QUERY
import re

print("Beyond20: Roll20 module loaded.")

chat = document.getElementById("textchat-input")
txt = chat.getElementsByTagName("textarea")[0]
btn = chat.getElementsByTagName("button")[0]
speakingas = document.getElementById("speakingas")
settings = getDefaultSettings()

def postChatMessage(message, character=None):
    nonlocal txt, btn, speakingas

    set_speakingas = True
    old_as = speakingas.value
    if character:
        character = character.toLowerCase()
        for i in range(speakingas.children.length):
            if speakingas.children[i].text.toLowerCase() == character:
                speakingas.children[i].selected = True
                set_speakingas = False
                break
    if set_speakingas:
        speakingas.children[0].selected = True
    old_text = txt.value
    txt.value = message
    btn.click()
    txt.value = old_text
    speakingas.value = old_as

def escapeRoll20Macro(text):
    def escapeCB(m):
        o = ord(m.group(0))
        if o == 10:
            o = 13
        return "&#" + str(o) + ";"
    to_escape = str.join("|\\", "\n[]{}()%@&?".split(""))
    return re.sub(to_escape, escapeCB, text)

def genRoll(dice, modifiers={}):
    roll = "[[" + dice
    for m in modifiers:
        mod = modifiers[m]
        if len(mod) > 0:
            if mod[0] == '+' or mod[0] == '-' or mod[0] == '?' or mod[0] == '&':
                roll += " " + mod
            else:
                roll += "+" + mod
            if len(m) > 0:
                roll += "[" + m + "]"
    roll += "]]"
    return roll

def subRolls(text, damage_only=False, overrideCB=None):
    if overrideCB:
        replaceCB = overrideCB
    else:
        replaceCB = def(dice, modifier):
            if damage_only and dice == "":
                return dice + modifier
            dice_formula = ("1d20" if dice == "" else dice) + modifier
            return genRoll(dice_formula)
    
    return replaceRolls(text, replaceCB)

def subDescriptionRolls(request, description):
    nonlocal settings
    if not settings["subst-vtt"]:
        return description
    replaceCB = def(dice, modifier):
        roll = ("1d20" if dice == "" else dice) + modifier
        roll_template = template(request, "simple",
                                 {"charname": request.character.name,
                                  "rname" : request.name,
                                  "mod": dice + modifier,
                                  "r1": genRoll(roll),
                                  "normal": 1})
        return "[" + dice + modifier + "](!\n" + escapeRoll20Macro(roll_template) + ")"
    return subRolls(description, overrideCB=replaceCB)

def subDamageRolls(text):
    return subRolls(text, damage_only=True)

def damagesToRollProperties(damages, damage_types, crits, crit_types):
    nonlocal settings

    properties = {"damage": 1,
                  "dmg1flag": 1}

    properties["dmg1"] = subDamageRolls(damages[0])
    properties["dmg1type"] = damage_types[0]
    if crits? and len(crits) > 0:
        properties["crit1"] = settings["crit-prefix"] + subDamageRolls(crits[0])
    if len(damages) > 1:
        properties["dmg2flag"] = 1
        properties["dmg2"] = subDamageRolls(str.join(" | ", list(damages[1:])))
        properties["dmg2type"] = str.join(" | ", damage_types[1:])
        if crits? and len(crits) > 1:
            properties["crit2"] = settings["crit-prefix"] + subDamageRolls(str.join(" | ", crits[1:]))

    return properties

def advantageString(advantage, r1):
    try:
        return {RollType.NORMAL: " {{normal=1}}",
                RollType.DOUBLE: " {{always=1}} {{r2=" + r1 + "}}",
                RollType.QUERY: str.format(ROLL20_ADVANTAGE_QUERY, r2=r1),
                RollType.ADVANTAGE: " {{advantage=1}} {{r2=" + r1 + "}}",
                RollType.DISADVANTAGE: " {{disadvantage=1}} {{r2=" + r1 + "}}",
                }[advantage]
    except:
        return str.format(ROLL20_ADVANTAGE_QUERY, r2=r1)
        return " {{normal=1}}"

def whisperString(whisper):
    try:
        return {WhisperType.NO: "",
                WhisperType.YES: "/w gm",
                WhisperType.QUERY: ROLL20_WHISPER_QUERY
                }[whisper]
    except:
        return ""

def template(request, name, properties):
    nonlocal settings
            
    result = whisperString(request.whisper)
    result += " &{template:" + name + "}"
    for key in properties:
        result += " {{" + key + "=" + properties[key] + "}}"

    if request.advantage? and "normal" not in properties and name in ["simple", "atk", "atkdmg"]:
        result += advantageString(request.advantage, properties["r1"])

    if settings["roll20-template"] == "default":
        result = result.replace("&{template:" + name + "}", "&{template:default}")

        renameProp = def(old_key, new_key):
            nonlocal result
            result = result.replace("{{" + old_key + "=", "{{" + new_key + "=")
        removeProp = def(key):
            nonlocal result, properties
            result = result.replace("{{" + key + "=" + (properties[key] if key in properties else "1") + "}}", "")
            result = result.replace("&#123&#123" + key + "=" + (properties[key] if key in properties else "1") + "&#125&#125", "")

        renameProp("charname", "Character name")
        renameProp("rname", "name")
        if "{{r2=" in result or "&#123&#123r2=" in result:
            renameProp("r1", "Regular Roll")
            renameProp("r2", "Roll with [Dis]Advantage")
            result = result.replace("&#123&#123r2=", "&#123&#123Roll with Advantage=")
            result = result.replace("&#123&#123r2=", "&#123&#123Roll with Disadvantage=")
        else:
            renameProp("r1", "Dice Roll")
        renameProp("mod", "Modifier")
        if properties["dmg2"]?:
            renameProp("dmg1", "First Damage")
            renameProp("dmg1type", "First Damage Type")
            renameProp("crit1", "First Crit Damage IF Critical")
            renameProp("dmg2", "Second Damage")
            renameProp("dmg2type", "Second Damage Type")
            renameProp("crit2", "Second Crit Damage IF Critical")
        if properties["dmg1"]?:
            renameProp("dmg1", "Damage")
            renameProp("dmg1type", "Damage Type")
            renameProp("crit1", "Crit Damage IF Critical")
        renameProp("saveattr", "Save Ability")
        renameProp("savedc", "Save DC")
        renameProp("athigherlevels", "At Higher Levels")
        renameProp("castingtime", "Casting Time")
        renameProp("hldmg", "Higher level cast")

        removeProp("attack")
        removeProp("attack")
        removeProp("damage")
        removeProp("save")
        removeProp("dmg1flag")
        removeProp("dmg2flag")
        removeProp("always")
        removeProp("normal")
        removeProp("advantage")
        removeProp("disadvantage")
        removeProp("query")

    return result

def rollSkill(request, custom_roll_dice=""):
    modifier = request.modifier
    # Custom skill
    if modifier == "--" and request.character.abilities.length > 0:
        modifier = "?{Choose Ability"
        # [name, abbr, value, mod]
        for ability in request.character.abilities:
            modifier += "|" + ability[0] + ", " + ability[3]
        modifier += "}"
        prof = ""
        prof_val = ""
        if request.proficiency == "Proficiency":
            prof = "PROF"
            prof_val += request.character.proficiency
        elif request.proficiency == "Half Proficiency":
            prof = "HALF-PROFICIENCY"
            prof_val += "+[[floor(" + request.character.proficiency + " / 2)]]"
        elif request.proficiency == "Expertise":
            prof = "EXPERTISE"
            prof_val += "+[[" + request.character.proficiency + " * 2]]"
        return template(request, "simple",
                         {"charname": request.character.name,
                          "rname" : request.skill,
                          "mod": "[[" + modifier + prof_val + "]]",
                          "r1": genRoll("1d20", {"--": modifier, prof: prof_val, "CUSTOM": custom_roll_dice})})
    else:
        return template(request, "simple",
                         {"charname": request.character.name,
                          "rname" : request.skill,
                          "mod": modifier,
                          "r1": genRoll("1d20", {request.ability: modifier, "CUSTOM": custom_roll_dice})})

def rollAbility(request, custom_roll_dice=""):
    dice_roll = genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice})
    modifier = request.modifier
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : request.name,
                     "mod": modifier,
                     "r1": dice_roll})

def rollSavingThrow(request, custom_roll_dice=""):
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : request.name + " Save",
                     "mod": request.modifier,
                     "r1": genRoll("1d20", {request.ability: request.modifier, "CUSTOM": custom_roll_dice})})

def rollInitiative(request, custom_roll_dice=""):
    nonlocal settings

    roll_properties = {"charname": request.character.name,
                       "rname" : "Initiative",
                       "mod": request.initiative}
    if settings["initiative-tracker"]:
        dice = "2d20kh1" if request.advantage == RollType.ADVANTAGE else "1d20"
        roll_properties["r1"] = genRoll(dice, {"INIT": request.initiative, "CUSTOM": custom_roll_dice, "": "&{tracker}"})
        roll_properties["normal"] = 1
    else:
        roll_properties["r1"] = genRoll("1d20", {"INIT": request.initiative, "CUSTOM": custom_roll_dice})
    return template(request, "simple", roll_properties)

def rollHitDice(request):
    rname = "Hit Dice" + (("(" + request.class + ")") if  request.multiclass else "")
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : rname,
                     "mod": request["hit-dice"],
                     "r1": subRolls(request["hit-dice"]),
                     "normal": 1})

def rollDeathSave(request, custom_roll_dice=""):
    return template(request, "simple",
                    {"charname": request.character.name,
                     "rname" : "Death Saving Throw",
                     "r1": genRoll("1d20cs>10cf<9", {"CUSTOM": custom_roll_dice}),
                     "normal": 1})

def rollTrait(request):
    if request["source-type"]?:
        source = request["source-type"]
        if request.source.length > 0:
            source += ": " + request.source
    elif request["item-type"]?:
        source = request["item-type"]
    else:
        source = request.type
    return template(request, "traits",
                    {"charname": request.character.name,
                     "name": request.name,
                     "source": source,
                     "description": subDescriptionRolls(request, request.description)})

def rollAttack(request, custom_roll_dice=""):
    nonlocal settings

    properties = {"charname": request.character.name,
                  "rname" : request.name}
    template_type = "atkdmg"
    dmg_props = {}
    if request["to-hit"]?:
        d20_roll = "1d20"
        if request["attack-source"] == "item":
            if request.character.type == "Character" and \
                    "Improved Critical" in request.character["class-features"]:
                d20_roll = "1d20cs>19"
            if request.character.type == "Character" and \
                    "Superior Critical" in request.character["class-features"]:
                d20_roll = "1d20cs>18"
        properties["mod"] = request["to-hit"]
        properties["r1"] = genRoll(d20_roll, {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties["attack"] = 1
    if request.damages?:
        damages = list(request.damages)
        damage_types = list(request["damage-types"])
        crit_damages = list(request["critical-damages"])
        crit_damage_types = list(request["critical-damage-types"])
        dmg_props = damagesToRollProperties(damages, damage_types, crit_damages, crit_damage_types)
    if request.range?:
        properties["range"] = request.range
    if request["save-dc"]?:
        dmg_props["save"] = 1
        dmg_props["saveattr"] = request["save-ability"]
        dmg_props["savedc"] = request["save-dc"]

    if request.damages? and request["to-hit"]? and not settings["auto-roll-damage"]:
        template_type = "atk"
        dmg_props["charname"] = request.character.name
        dmg_props["rname"] = request.name
        dmg_props["crit"] = 1
        dmg_template_crit = template(request, "dmg", dmg_props)
        del dmg_props["crit"]
        del dmg_props["crit1"]
        del dmg_props["crit2"]
        dmg_template = template(request, "dmg", dmg_props)
        properties["rname"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template) + ")"
        properties["rnamec"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template_crit) + ")"
    else:
        for key in dmg_props:
            properties[key] = dmg_props[key]

    return template(request, template_type, properties)

def rollSpellCard(request):
    properties = {"charname": request.character.name,
                  "name": request.name,
                  "castingtime": request["casting-time"],
                  "range": request.range,
                  "duration": request.duration}

    if request["cast-at"]?:
        properties["level"] = request["level-school"] + "(Cast at " + request["cast-at"] + " Level)"
    else:
        properties["level"] = request["level-school"]
                                                    
    components = request.components
    while components != "":
        if components[0] == "V":
            properties["v"] = 1
            components = components[1:]
        elif components[0] == "S":
            properties["s"] = 1
            components = components[1:]
        elif components[0] == "M":
            properties["m"] = 1
            properties["material"] = components[2:-1]
            components = ""
        if components.startsWith(", "):
            components = components[2:]
    if request.ritual:
        properties["ritual"] = 1
    if request.concentration:
        properties["concentration"] = 1
    description = request.description            
    higher = description.indexOf("At Higher Levels.")
    if higher > 0:
        properties["description"] = subDescriptionRolls(request, description[:higher-1])
        properties["athigherlevels"] = subDescriptionRolls(request, description[higher+"At Higher Levels.".length:])
    else:
        properties["description"] = subDescriptionRolls(request, description)

    return template(request, "spell", properties)

def rollSpellAttack(request, custom_roll_dice):
    properties = {"charname": request.character.name,
                  "rname" : request.name}
    template_type = "atkdmg"
    dmg_props = {}
    if request["to-hit"]?:
        properties["mod"] = request["to-hit"]
        properties["r1"] = genRoll("1d20", {"": request["to-hit"], "CUSTOM": custom_roll_dice})
        properties["attack"] = 1
    if request.damages?:
        damages = list(request.damages)
        damage_types = list(request["damage-types"])
        critical_damages = list(request["critical-damages"])
        critical_damage_types = list(request["critical-damage-types"])
        if request.name == "Chromatic Orb":
            chromatic_type = "?{Choose damage type"
            for dmgtype in ["Acid", "Cold", "Fire", "Lightning", "Poison", "Thunder"]:
                idx = damage_types.index(dmgtype)
                chromatic_damage = damages.pypop(idx)
                damage_types.pypop(idx)
                idx = critical_damage_types.index(dmgtype)
                if idx >= 0:
                    crit_damage = critical_damages.pypop(idx)
                    critical_damage_types.pypop(idx)
                chromatic_type += "|" + dmgtype
            chromatic_type += "}"
            damages.insert(0, chromatic_damage)
            damage_types.insert(0, chromatic_type)
            critical_damages.insert(0, crit_damage)
            critical_damage_types.insert(0, chromatic_type)
        dmg_props = damagesToRollProperties(damages, damage_types, critical_damages, critical_damage_types)
    if request.range?:
        properties["range"] = request.range
    if request["save-dc"]?:
        dmg_props["save"] = 1
        dmg_props["saveattr"] = request["save-ability"]
        dmg_props["savedc"] = request["save-dc"]
    if request["cast-at"]?:
        dmg_props["hldmg"] = genRoll(request["cast-at"][0]) + request["cast-at"][1:] + " Level"
    components = request.components
    if settings["components-display"] == "all":
        if components != "":
            properties["desc"] = settings["component-prefix"] + components
            components = ""
    elif settings["components-display"] == "material":
        while components != "":
            if components[0] in ["V", "S"]:
                components = components[1:]
                if components.startsWith(", "):
                    components = components[2:]
            if components[0] == "M":
                properties["desc"] = settings["component-prefix"] + components[2:-1]
                components = ""

    if request.damages? and request["to-hit"]? and not settings["auto-roll-damage"]:
        template_type = "atk"
        dmg_props["charname"] = request.character.name
        dmg_props["rname"] = request.name
        dmg_props["crit"] = 1
        dmg_template_crit = template(request, "dmg", dmg_props)
        del dmg_props["crit"]
        del dmg_props["crit1"]
        del dmg_props["crit2"]
        dmg_template = template(request, "dmg", dmg_props)
        properties["rname"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template) + ")"
        properties["rnamec"] =  "[" + request.name + "](!\n" + escapeRoll20Macro(dmg_template_crit) + ")"
    else:
        for key in dmg_props:
            properties[key] = dmg_props[key]

    roll = template(request, template_type, properties)
    return roll

def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
        )

def handleMessage (request, sender, sendResponse):
    nonlocal settings
    print("Got message : ", request)
    if request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
    elif request.action == "hp-update":
        if settings["update-hp"]:
            sendCustomEvent("UpdateHP", (request.character.name, request.character.hp, request.character["max-hp"]))
    elif request.action == "roll":
        if request.character.type == "Character":
            custom_roll_dice = request.character.settings["custom-roll-dice"] ? ""
            custom_roll_dice = re.sub("([0-9]*d[0-9]+)", "\\1cs>100cf<0", custom_roll_dice)
        else:
            custom_roll_dice = ""
        if request.type == "skill":
            roll = rollSkill(request, custom_roll_dice)
        elif request.type == "ability":
            roll = rollAbility(request, custom_roll_dice)
        elif request.type == "saving-throw":
            roll = rollSavingThrow(request, custom_roll_dice)
        elif request.type == "initiative":
            roll = rollInitiative(request, custom_roll_dice)
        elif request.type == "hit-dice":
            roll = rollHitDice(request)
        elif request.type in ["item", "feature", "trait", "action"]:
            roll = rollTrait(request)
        elif request.type == "death-save":
            roll = rollDeathSave(request, custom_roll_dice)
        elif request.type == "attack":
            roll = rollAttack(request, custom_roll_dice)
        elif request.type == "spell-card":
            roll = rollSpellCard(request)
        elif request.type == "spell-attack":
            roll = rollSpellAttack(request, custom_roll_dice)
        else:
            # 'custom' or anything unexpected
            mod = request.modifier if request.modifier? else request.roll
            rname = request.name if request.name? else request.type
            roll = template(request, "simple",
                             {"charname": request.character.name,
                              "rname" : rname,
                              "mod": mod,
                              "r1": subRolls(request.roll),
                              "normal": 1})
        postChatMessage(roll, request.character.name)

chrome.runtime.onMessage.addListener(handleMessage)
updateSettings()
chrome.runtime.sendMessage({"action": "activate-icon"})
sendCustomEvent("disconnect")
injectPageScript(chrome.runtime.getURL('src/roll20_script.js'))
