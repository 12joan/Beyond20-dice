from settings import getDefaultSettings, getStoredSettings, RollType
from utils import isExtensionDisconnected, alertQuickSettings
from elementmaker import E
import math
import re
from dndbeyond import Character, Monster, buildAttackRoll, sendRoll, \
    ability_abbreviations, findToHit, descriptionToString, propertyListToDict, \
    injectDiceToRolls, addIconButton, addHitDieButtons, addDisplayButton, addRollButton, \
    isHitDieButtonAdded, isRollButtonAdded, isCustomRollIconsAdded, removeRollButtons

print("Beyond20: D&D Beyond module loaded.")

def sendRollWithCharacter(rollType, fallback, args):
    nonlocal character
    nonlocal settings

    sendRoll(character, rollType, fallback, args)


def rollSkillCheck(paneClass):
    nonlocal character, settings

    skill_name = $("." + paneClass + "__header-name").text()
    ability = $("." + paneClass + "__header-ability").text()
    modifier = $("." + paneClass + "__header-modifier").text()
    proficiency = $("." + paneClass + "__header-icon .ct-tooltip").attr("data-original-title")
    print("Skill " + skill_name + "(" + ability + ") : " + modifier)
    roll_properties = {"skill": skill_name,
                       "ability": ability,
                       "modifier": modifier,
                       "proficiency": proficiency}
    if ability == "STR" and character.hasClassFeature("Rage") and character.getSetting("barbarian-rage", False):
        roll_properties["advantage"] = RollType.ADVANTAGE
    sendRollWithCharacter("skill", "1d20" + modifier, roll_properties)

def rollAbilityOrSavingThrow(paneClass, rollType):
    nonlocal character

    ability_string = $("." + paneClass + " .ct-sidebar__heading").text()
    ability_name = ability_string.split(" ")[0]
    modifier = $("." + paneClass + "__modifier .ct-signed-number").text()
    ability = ability_abbreviations[ability_name]

    if rollType == "ability" and character.hasClassFeature("Jack of All Trades") and \
            character.getSetting("bard-joat", False):
        JoaT = int(math.floor(float(character._proficiency) / 2))
        modifier += " + " + JoaT

    roll_properties = {"name" : ability_name,
                       "ability": ability,
                       "modifier": modifier}

    if ability == "STR" and character.hasClassFeature("Rage") and character.getSetting("barbarian-rage", False):
        roll_properties["advantage"] = RollType.ADVANTAGE
    sendRollWithCharacter(rollType, "1d20" + modifier, roll_properties)

def rollAbilityCheck():
    rollAbilityOrSavingThrow("ct-ability-pane", "ability")

def rollSavingThrow():
    rollAbilityOrSavingThrow("ct-ability-saving-throws-pane", "saving-throw")

def rollInitiative():
    initiative = $(".ct-initiative-box__value").text()
    advantage = $(".ct-initiative-box__advantage").length > 0
    if initiative == "":
        initiative = $(".ct-combat-mobile__extra--initiative .ct-combat-mobile__extra-value").text()
        advantage = $(".ct-combat-mobile__advantage").length > 0
    print("Initiative " + ("with" if advantage else "without") + " advantage : " + initiative)
    roll_properties = {"initiative": initiative}
    if advantage:
        roll_properties["advantage"] = RollType.ADVANTAGE
    sendRollWithCharacter("initiative", "1d20" + initiative, roll_properties)

        
def rollHitDie(multiclass, index):
    print("Rolling hit die index " + index)
    hitdie = $(".ct-reset-pane__hitdie").eq(index)
    class_name = hitdie.find(".ct-reset-pane__hitdie-heading-class").text()
    text = hitdie.find(".ct-reset-pane__hitdie-heading").text()
    die = text.split("Hit Die: ")[1].split(" ")[0]
    sendRollWithCharacter("hit-dice", die, {"class": class_name,
                               "multiclass": multiclass,
                               "hit-dice": die} )

def rollItem(force_display=False):
    nonlocal character

    prop_list = $(".ct-item-pane .ct-property-list .ct-property-list__property")
    properties = propertyListToDict(prop_list)
    print("Properties are : " + str(properties))
    item_name = $(".ct-item-pane .ct-item-name").text()
    item_type = $(".ct-item-detail__intro").text()
    description = descriptionToString(".ct-item-detail__description")
    if force_display is False and "Damage" in properties:
        to_hit = properties["To Hit"] ? \
            findToHit(item_name, ".ct-combat-attack--item", ".ct-item-name", ".ct-combat-attack__tohit")

        damages = []
        damage_types = []
        for i in range(prop_list.length):
            if prop_list.eq(i).find(".ct-property-list__property-label").text() == "Damage:":
                value = prop_list.eq(i).find(".ct-property-list__property-content")
                damage = value.find(".ct-damage__value").text()
                damage_type = properties["Damage Type"] ? ""
                versatile_damage = value.find(".ct-item-detail__versatile-damage").text()[1:-1]
                if character.hasClassFeature("Fighting Style: Great Weapon Fighting") and \
                    (properties["Properties"].includes("Versatile") or properties["Properties"].includes("Two-Handed")) and \
                        damages.length == 0:
                        if versatile_damage != "":
                            versatile_damage = re.sub("[0-9]*d[0-9]+", "\\0ro<2", versatile_damage)
                        else:
                            damage = re.sub("[0-9]*d[0-9]+", "\\0ro<2", damage)

                if versatile_damage != "":
                    versatile_choice = character.getSetting("versatile-choice", "both")
                    if versatile_choice == "one":
                        damages.append(damage)
                        damage_types.append(damage_type)
                    elif versatile_choice == "two":
                        damages.append(versatile_damage)
                        damage_types.append(damage_type)
                    else:
                        damages.append(damage)
                        damage_types.append(damage_type)
                        damages.append(versatile_damage)
                        damage_types.append("Two-Handed")
                else:
                    damages.append(damage)
                    damage_types.append(damage_type)
                additional_damages = value.find(".ct-item-detail__additional-damage")
                for j in range(additional_damages.length):
                    dmg = additional_damages.eq(j).text()
                    dmg_type = additional_damages.eq(j).find(".ct-damage-type-icon .ct-tooltip").attr("data-original-title")
                    dmg_info = additional_damages.eq(j).find(".ct-item-detail__additional-damage-info").text()
                    if dmg != "":
                        dmg = dmg.replace(dmg_info, "")
                        if dmg_info != "":
                            dmg_type += "(" + dmg_info + ")"
                        damages.append(dmg)
                        damage_types.append(dmg_type)
                break

        custom_damage = character.getSetting("custom-damage-dice", "")
        if len(custom_damage) > 0:
            damages.append(custom_damage)
            damage_types.append("Custom")
        if "Rogue" in character._classes and \
                character.getSetting("rogue-sneak-attack", False) and \
                (properties["Attack Type"] == "Ranged" or \
                     (properties["Properties"]? and properties["Properties"].includes("Finesse"))):
            sneak_attack = int(math.ceil(float(character._classes["Rogue"]) / 2)) + "d6"
            damages.append(sneak_attack)
            damage_types.append("Sneak Attack")
        if character.getSetting("sharpshooter", False) and \
                properties["Attack Type"] == "Ranged" and \
                properties["Proficient"] == "Yes":
            to_hit += " - 5"
            damages.insert(1, " + 10")
            damage_types.insert(1, "Sharpshooter")
            character.mergeCharacterSettings({"sharpshooter": False})
        if character.getSetting("great-weapon-master", False) and \
                properties["Attack Type"] == "Melee" and \
                properties["Properties"].includes("Heavy") and \
                properties["Proficient"] == "Yes":
            to_hit += " - 5"
            damages.insert(1, " + 10")
            damage_types.insert(1, "Weapon Master")
            character.mergeCharacterSettings({"great-weapon-master": False})
        if character.getSetting("bloodhunter-crimson-rite", False) and \
            character.hasClassFeature("Crimson Rite"):
            bloodhunter_level = character.getClassLevel("Blood Hunter")
            if bloodhunter_level > 0:
                if bloodhunter_level <= 4:
                    rite_die = "1d4"
                elif bloodhunter_level <= 10:
                    rite_die = "1d6"
                elif bloodhunter_level <= 16:
                    rite_die = "1d8"
                else:
                    rite_die = "1d10"
                damages.append(rite_die)
                damage_types.append("Crimson Rite")
        if character.getSetting("ranger-dread-ambusher", False):
            damages.append("1d8")
            damage_types.append("Ambush")
            character.mergeCharacterSettings({"ranger-dread-ambusher": False})
        if damages.length > 0 and \
           character.getSetting("warlock-hexblade-curse", False) and \
           character.hasClassFeature("Hexbladeâ€™s Curse") and \
           character._proficiency is not None:
            damages.append(character._proficiency)
            damage_types.append("Hexblade's Curse")

        critical_limit = 20
        if character.hasAction("Channel Divinity: Legendary Strike") and \
           character.getSetting("paladin-legendary-strike", False):
            critical_limit = 19
        if character.hasClassFeature("Hexbladeâ€™s Curse") and \
           character.getSetting("warlock-hexblade-curse", False):
            critical_limit = 19
        if character.hasClassFeature("Improved Critical"):
            critical_limit = 19
        if character.hasClassFeature("Superior Critical"):
            critical_limit = 18

        brutal = 0
        if properties["Attack Type"] == "Melee":
            if character.getSetting("brutal-critical"):
                if character.hasClassFeature("Brutal Critical"):
                    barbarian_level = character.getClassLevel("Barbarian")
                    brutal += 1 + math.floor((barbarian_level - 9) / 4)
                if character.hasRacialTrait("Savage Attacks"):
                    brutal += 1
            if character.hasClassFeature("Rage") and character.getSetting("barbarian-rage", False):
                barbarian_level = character.getClassLevel("Barbarian")
                rage_damage = 2 if barbarian_level < 9 else (3 if barbarian_level < 16 else 4)
                damages.insert(1, str(rage_damage))
                damage_types.insert(1, "Rage")
        roll_properties = buildAttackRoll("item",
                                          item_name,
                                          description,
                                          properties,
                                          damages,
                                          damage_types,
                                          to_hit,
                                          brutal)
        roll_properties["item-type"] = item_type
        if critical_limit != 20:
            roll_properties["critical-limit"] = critical_limit
            
        # Asssassinate: consider all rolls as critical
        if character.hasClassFeature("Assassinate") and \
           character.getSetting("rogue-assassinate", False):
            roll_properties["critical-limit"] = 1
            roll_properties["advantage"] = RollType.ADVANTAGE
            character.mergeCharacterSettings({"rogue-assassinate": False})
        sendRollWithCharacter("attack", damages[0], roll_properties)
    else:
        sendRollWithCharacter("item", 0, {"name": item_name,
                             "description" : description,
                             "item-type": item_type})        

def rollAction(paneClass):
    nonlocal character
    properties = propertyListToDict($("." + paneClass + " .ct-property-list .ct-property-list__property"))
    print("Properties are : " + str(properties))
    action_name = $(".ct-sidebar__heading").text()
    action_parent = $(".ct-sidebar__header-parent").text()
    description = descriptionToString(".ct-action-detail__description")
    if action_name == "Superiority Dice" or action_parent == "Maneuvers":
        fighter_level = character.getClassLevel("Fighter")
        superiority_die = "1d8" if fighter_level < 10 else ("1d10" if fighter_level < 18 else "1d12")
        sendRollWithCharacter("custom", superiority_die, {"name": action_name,
                                                          "description": description,
                                                          "modifier": superiority_die})
    elif "Damage" in properties or properties["To Hit"]? or properties["Attack/Save"]?:
        if "Damage" in properties:
            damages = [properties["Damage"]]
            damage_types = [properties["Damage Type"] ? ""]
            if character.getSetting("warlock-hexblade-curse", False) and \
                character.hasClassFeature("Hexbladeâ€™s Curse") and \
                character._proficiency is not None:
                damages.append(character._proficiency)
                damage_types.append("Hexblade's Curse")
        else:
            damages = []
            damage_types = []
        custom_damage = character.getSetting("custom-damage-dice", "")
        if len(custom_damage) > 0:
            damages.append(custom_damage)
            damage_types.append("Custom")
        roll_properties = buildAttackRoll("action",
                                          action_name,
                                          description,
                                          properties,
                                          damages,
                                          damage_types,
                                          properties["To Hit"] ? None)

        # Asssassinate: consider all rolls as critical
        if character.hasClassFeature("Assassinate") and \
           character.getSetting("rogue-assassinate", False):
            roll_properties["critical-limit"] = 1
            roll_properties["advantage"] = RollType.ADVANTAGE
            character.mergeCharacterSettings({"rogue-assassinate": False})
        sendRollWithCharacter("attack", damages[0], roll_properties)
    else:
        sendRollWithCharacter("action", 0, {"name": action_name,
                                            "description" : description})
        
def rollSpell(force_display=False):
    nonlocal character
    properties = propertyListToDict($(".ct-spell-pane .ct-property-list .ct-property-list__property"))
    print("Properties are : " + str(properties))
    spell_name = $(".ct-sidebar__heading .ct-spell-name").text()
    description = descriptionToString(".ct-spell-pane .ct-spell-detail__description")
    damage_modifiers = $(".ct-spell-pane .ct-spell-caster__modifiers--damages .ct-spell-caster__modifier--damage")
    healing_modifiers = $(".ct-spell-pane .ct-spell-caster__modifiers--healing .ct-spell-caster__modifier--hp")
    castas = $(".ct-spell-caster__casting-level-current").text()
    level = descriptionToString(".ct-spell-pane .ct-spell-detail__level-school", " ")
    concentration = $(".ct-spell-pane .ct-spell-name__icon--concentration").length > 0
    ritual = $(".ct-spell-pane .ct-spell-name__icon--ritual").length > 0
    duration = properties["Duration"] ? ""
    if "Concentration" in duration:
        duration = duration.replace("Concentration, ", "")
        concentration = True
    else:
        concentration = False
    to_hit = properties["To Hit"] ? \
        findToHit(spell_name, ".ct-combat-attack--spell", ".ct-spell-name", ".ct-combat-attack__tohit")
    if not to_hit:
        to_hit = findToHit(spell_name, ".ct-spells-spell", ".ct-spell-name", ".ct-spells-spell__tohit")

    if force_display is False and (damage_modifiers.length > 0 or healing_modifiers.length > 0 or to_hit != None):
        damages = []
        damage_types = []
        for modifier in damage_modifiers:
            dmg = $(modifier).find(".ct-spell-caster__modifier-amount").text()
            dmgtype = $(modifier).find(".ct-damage-type-icon .ct-tooltip").attr("data-original-title")
            if not dmgtype?:
                dmgtype = ""
            damages.append(dmg)
            damage_types.append(dmgtype)
        if damages.length > 0 and \
            character.getSetting("warlock-hexblade-curse", False) and \
            character.hasClassFeature("Hexbladeâ€™s Curse") and \
            character._proficiency is not None:
            damages.append(character._proficiency)
            damage_types.append("Hexblade's Curse")
        for modifier in healing_modifiers:
            dmg = $(modifier).find(".ct-spell-caster__modifier-amount").text()
            if dmg.startsWith("Regain "):
                dmg = dmg[7:]
            if dmg.endsWith(" Hit Points"):
                dmg = dmg[:-11]
            damages.append(dmg)
            damage_types.append("Healing")

        if healing_modifiers.length > 0 and \
                character.hasClassFeature("Disciple of Life") and \
                character.getSetting("cleric-disciple-life", False):
            spell_level = level[0]
            if castas != "":
                spell_level = castas[0]
            damages.append(str(2 + int(spell_level)))
            damage_types.append("Disciple of Life")

        custom_damage = character.getSetting("custom-damage-dice", "")
        if len(custom_damage) > 0 and len(damages) > 0:
            damages.append(custom_damage)
            damage_types.append("Custom")

        roll_properties = buildAttackRoll("spell",
                                          spell_name,
                                          description,
                                          properties,
                                          damages,
                                          damage_types,
                                          to_hit)

        spell_properties = {"level-school": level,
                            "concentration": concentration,
                            "duration": duration,
                            "casting-time": (properties["Casting Time"] ? ""),
                            "components": (properties["Components"] ? ""),
                            "ritual": ritual}
        for key in spell_properties:
            roll_properties[key] = spell_properties[key]
        if castas != "" and not level.startsWith(castas):
            roll_properties["cast-at"] = castas
            
        # Asssassinate: consider all rolls as critical
        if character.hasClassFeature("Assassinate") and \
           character.getSetting("rogue-assassinate", False):
            roll_properties["critical-limit"] = 1
            roll_properties["advantage"] = RollType.ADVANTAGE
            character.mergeCharacterSettings({"rogue-assassinate": False})

        sendRollWithCharacter("spell-attack", damages[0] ? "", roll_properties)
    else:
        roll_properties = {"name": spell_name,
                           "level-school": level,
                           "range": (properties["Range/Area"] ? ""),
                           "concentration": concentration,
                           "duration": duration,
                           "casting-time": (properties["Casting Time"] ? ""),
                           "components": (properties["Components"] ? ""),
                           "ritual": ritual,
                           "description" : description}
        if castas != "" and not level.startsWith(castas):
            roll_properties["cast-at"] = castas
        sendRollWithCharacter("spell-card", 0, roll_properties)

def displayItem():
    rollItem(True)

def displaySpell():
    rollSpell(True)

def displayFeature(paneClass):
    source_types = {"ct-class-feature-pane": "Class",
               "ct-racial-trait-pane": "Race",
               "ct-feat-pane": "Feat"}
    name = $(".ct-sidebar__heading").text()
    source = $(".ct-sidebar__header-parent").text()
    source_type = source_types[paneClass]
    description = descriptionToString(".ct-snippet__content")
    sendRollWithCharacter("feature", 0, {"name": name,
                            "source": source,
                            "source-type": source_type,
                            "description": description} )

def displayTrait():
    trait = $(".ct-sidebar__heading").text()
    description = $(".ct-trait-pane__input").text()
    sendRollWithCharacter("trait", 0, {"name": trait,
                            "description": description})
                            
def displayAction(paneClass):
    action_name = $(".ct-sidebar__heading").text()
    description = descriptionToString(".ct-action-detail__description")
    sendRollWithCharacter("action", 0, {"name": action_name,
                                        "description" : description})

def execute(paneClass):
    print("Beyond20: Executing panel : " + paneClass)
    if paneClass in ["ct-skill-pane", "ct-custom-skill-pane"]:
        rollSkillCheck(paneClass)
    elif paneClass == "ct-ability-pane":
        rollAbilityCheck()
    elif paneClass == "ct-ability-saving-throws-pane":
        rollSavingThrow()
    elif paneClass == "ct-initiative-pane":
        rollInitiative()
    elif paneClass == "ct-item-pane":
        rollItem()
    elif paneClass in ["ct-action-pane", "ct-custom-action-pane"]:
        rollAction(paneClass)
    elif paneClass == "ct-spell-pane":
        rollSpell()
    else:
        displayPanel(paneClass)

def displayPanel(paneClass):
    print("Beyond20: Displaying panel : " + paneClass)
    if paneClass == "ct-item-pane":
        displayItem()
    elif paneClass == "ct-spell-pane":
        displaySpell()
    elif paneClass in ["ct-class-feature-pane", "ct-racial-trait-pane", "ct-feat-pane"]:
        displayFeature(paneClass)
    elif paneClass == "ct-trait-pane":
        displayTrait()
    elif paneClass in ["ct-action-pane", "ct-custom-action-pane"]:
        displayAction(paneClass)
    else:
        alert("Not recognizing the currently open sidebar")

def findModifiers(character, custom_roll):
    sibling = custom_roll.nextSibling
    if sibling and sibling.nodeName == "#text":
        strong = $(custom_roll).find("strong")
        img = $(custom_roll).find("img")
        roll_formula = img.attr("x-beyond20-roll")
        text = sibling.textContent
        text_len = 0
        while text_len != len(text):
            # If text length changes, we can check again for another modifier
            text_len = len(text)
            for ability in character._abilities:
                mod_string = " + your " + ability[0] + " modifier"
                if text.startsWith(mod_string):
                    strong.append(mod_string)
                    roll_formula += ability[3]
                    text = text.substring(len(mod_string))
            for class_name in character._classes:
                mod_string = " + your " + class_name.toLowerCase() + " level"
                if text.startsWith(mod_string):
                    strong.append(mod_string)
                    roll_formula += " + " + character._classes[class_name]
                    text = text.substring(len(mod_string))
            
            mod_string = " + your proficiency bonus"
            if text.startsWith(mod_string):
                strong.append(mod_string)
                roll_formula += character.proficiency
                text = text.substring(len(mod_string))

        sibling.textContent = text
        img.attr("x-beyond20-roll", roll_formula)
            

def checkAndInjectDiceToRolls(selector, name=""):
    nonlocal settings
    nonlocal character
    if not settings["subst-dndbeyond"]:
        return

    injectDiceToRolls(selector, character, name)

    for custom_roll in $(".ct-beyond20-custom-roll"):
        findModifiers(character, custom_roll)

def addRollButtonEx(paneClass, where, small=False, append=False, prepend=False, image=True, text="Beyond 20"):
    callback = def():
        execute(paneClass)
    addRollButton(callback, where, small=small, append=append, prepend=prepend, image=image, text=text)

def addDisplayButtonEx(paneClass, where, text="Display in VTT"):
    callback = def():
        displayPanel(paneClass)
    addDisplayButton(callback, where, text)

lastItemName = ""
lastSpellName = ""
lastSpellLevel = ""
def injectRollButton(paneClass):
    nonlocal settings
    if paneClass in ["ct-custom-skill-pane",
                     "ct-skill-pane",
                     "ct-ability-pane",
                     "ct-ability-saving-throws-pane",
                     "ct-initiative-pane"]:
        if isRollButtonAdded():
            return
        addRollButtonEx(paneClass, ".ct-sidebar__heading")
    elif paneClass in ["ct-class-feature-pane", "ct-racial-trait-pane", "ct-feat-pane"]:
        if isRollButtonAdded():
            return
        addRollButtonEx(paneClass, ".ct-sidebar__heading", text="Display in VTT", image=False)
        name = $(".ct-sidebar__heading").text()
        checkAndInjectDiceToRolls(".ct-snippet__content", name)
    elif paneClass == "ct-trait-pane":
        if isRollButtonAdded():
            return
        addRollButtonEx(paneClass, ".ct-trait-pane__content", text="Display in VTT", image=False)
    elif paneClass == "ct-item-pane":
        nonlocal lastItemName
        item_name = $(".ct-item-pane .ct-item-name").text()
        if isRollButtonAdded() and item_name == lastItemName:
            return
        lastItemName = item_name
        removeRollButtons()

        checkAndInjectDiceToRolls(".ct-item-detail__description", item_name)
        properties = propertyListToDict($(".ct-item-pane .ct-property-list .ct-property-list__property"))
        if "Damage" in properties:
            addRollButtonEx(paneClass, ".ct-sidebar__heading", small=True)
            addDisplayButtonEx(paneClass, ".ct-beyond20-roll")
        else:
            addRollButtonEx(paneClass, ".ct-sidebar__heading", image=False)
            addRollButtonEx(paneClass, ".ct-item-detail__actions", small=True, append=True, image=False)
    elif paneClass in ["ct-action-pane", "ct-custom-action-pane"]:
        if isRollButtonAdded():
            return
            
        properties = propertyListToDict($("." + paneClass + " .ct-property-list .ct-property-list__property"))
        action_name = $(".ct-sidebar__heading").text()
        action_parent = $(".ct-sidebar__header-parent").text()
        if (action_name == "Superiority Dice" or action_parent == "Maneuvers") or \
           ("Damage" in properties or properties["To Hit"]? or properties["Attack/Save"]?):
            addRollButtonEx(paneClass, ".ct-sidebar__heading", small=True)
            addDisplayButtonEx(paneClass, ".ct-beyond20-roll")
        else:
            addRollButtonEx(paneClass, ".ct-sidebar__heading")
        checkAndInjectDiceToRolls(".ct-action-detail__description", action_name)
    elif paneClass == "ct-spell-pane":
        nonlocal lastSpellName
        nonlocal lastSpellLevel
        spell_name = $(".ct-sidebar__heading .ct-spell-name").text()
        spell_level = $(".ct-spell-caster__casting-level-current").text()
        if isRollButtonAdded() and spell_name == lastSpellName and spell_level == lastSpellLevel:
            return
        lastSpellName = spell_name
        lastSpellLevel = spell_level
        removeRollButtons()
        checkAndInjectDiceToRolls(".ct-spell-pane .ct-spell-detail__description", spell_name)

        damages = $(".ct-spell-pane .ct-spell-caster__modifiers--damages .ct-spell-caster__modifier--damage")
        healings = $(".ct-spell-pane .ct-spell-caster__modifiers--healing .ct-spell-caster__modifier--hp")
        properties = propertyListToDict($(".ct-spell-pane .ct-property-list .ct-property-list__property"))
        to_hit = properties["To Hit"] ? \
            findToHit(spell_name, ".ct-combat-attack--spell", ".ct-spell-name", ".ct-combat-attack__tohit")
        if not to_hit:
            to_hit = findToHit(spell_name, ".ct-spells-spell", ".ct-spell-name", ".ct-spells-spell__tohit")

        if damages.length > 0 or healings.length > 0 or to_hit != None:
            addRollButtonEx(paneClass, ".ct-sidebar__heading", text="Cast on VTT", small=True)
            addDisplayButtonEx(paneClass, ".ct-beyond20-roll")
        else:
            addRollButtonEx(paneClass, ".ct-sidebar__heading", text="Cast on VTT", image=False)

        $(".ct-spell-caster__casting-action > button").on('click', def(event):
            execute(paneClass)
        )
    elif paneClass == "ct-reset-pane":
        hitdice = $(".ct-reset-pane__hitdie")
        if hitdice.length > 0:
            if isHitDieButtonAdded():
                return
            removeRollButtons()
            addHitDieButtons(rollHitDie)
        else:
            removeRollButtons()
    elif paneClass == "ct-health-manage-pane":
        if $(".ct-health-manage-pane .ct-health-manager__deathsaves").length > 0:
            if isRollButtonAdded():
                return
            cb = def():
                sendRollWithCharacter("death-save", "1d20", {"advantage": RollType.NORMAL})
            addIconButton(cb, ".ct-health-manager__deathsaves-group--fails")
        else:
            removeRollButtons()
    elif paneClass == "ct-creature-pane":
        if isRollButtonAdded() or isCustomRollIconsAdded():
            return
        character = Monster("Creature", global_settings=settings)
        character.parseStatBlock()
    elif paneClass == "ct-vehicle-pane":
        if isRollButtonAdded() or isCustomRollIconsAdded():
            return
        character = Monster("Extra-Vehicle", ".ct-vehicle-block", global_settings=settings)
        character.parseStatBlock()
    else:
        removeRollButtons()


def injectRollToSpellAttack():
    groups = $(".ct-spells-level-casting__info-group")

    for group in groups:
        label = $(group).find(".ct-spells-level-casting__info-label")
        if label.text() == "Spell Attack":
            if label.hasClass("beyond20-rolls-added"):
                return
            label.addClass("beyond20-rolls-added")
            icon16 = chrome.extension.getURL("images/icons/icon16.png")
            items = $(group).find(".ct-spells-level-casting__info-item")
            for item in items:
                modifier = item.textContent
                name = "Spell Attack"
                if items.length > 1:
                    name += "(" + item.getAttribute("data-original-title") + ")"
                img = E.img(class_="ct-beyond20-spell-attack-icon ct-beyond20-spell-attack",
                            x_beyond20_name=name, x_beyond20_modifier=modifier, src=icon16)
                item.append(img)
                console.log(item)
            $(".ct-beyond20-spell-attack-icon").css("margin-left", "3px")
            $(".ct-beyond20-spell-attack").on('click', def(event):
                name = $(event.currentTarget).attr("x-beyond20-name")
                mod = $(event.currentTarget).attr("x-beyond20-modifier")
                sendRollWithCharacter("custom", "1d20" + mod, {"name": name, "modifier": mod})
            )

def injectSettingsButton():
    if $(".ct-beyond20-settings").length > 0:
        return
    desktop_gap = $(".ct-character-header-desktop__group--gap")
    tablet_gap = $(".ct-character-header-tablet__group--gap")
    mobile_gap = $(".ct-character-header-mobile__group--gap")

    if desktop_gap.length > 0:
        button_type = "desktop"
        gap = desktop_gap
        span_text = "Beyond 20"
        icon = chrome.extension.getURL("images/icons/icon16.png")
    elif tablet_gap.length > 0:
        button_type = "tablet"
        gap = tablet_gap
        span_text = "Beyond 20"
        icon = chrome.extension.getURL("images/icons/icon16.png")
    elif mobile_gap.length > 0:
        button_type = "mobile"
        gap = mobile_gap
        span_text = "\u00A0\u00A0" # Add 2 non breaking spaces as padding
        icon = chrome.extension.getURL("images/icons/icon32.png")
    else:
        return
    button = E.div(class_="ct-character-header-" + button_type + "__group ct-character-header-" + button_type + "__group--beyond20",
                    E.div(class_="ct-character-header-" + button_type + "__button",
                            E.img(class_="ct-beyond20-settings", src=icon),
                            E.span(class_="ct-character-header-" + button_type + "__button-label", span_text)
                    )
    )
    gap.after(button)
    $(button).on('click', def(event): alertQuickSettings();)
        
def documentModified(mutations, observer):
    nonlocal character

    if isExtensionDisconnected():
        observer.disconnect()
        return

    character.updateInfo()
    injectRollToSpellAttack()
    injectSettingsButton()

    pane = $(".ct-sidebar__pane-content > div")
    if pane.length > 0:
        for div in range(pane.length):
            paneClass = pane[div].className
            if paneClass == "ct-sidebar__pane-controls" or paneClass == "ct-beyond20-settings-pane":
                continue
            print("Beyond20: New side panel is : " + paneClass)
            injectRollButton(paneClass)

def updateSettings(new_settings=None):
    nonlocal settings
    nonlocal character

    if new_settings:
        settings = new_settings
        character.setGlobalSettings(settings)
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            updateSettings(saved_settings)
            documentModified()
        )

def handleMessage (request, sender, sendResponse):
    nonlocal settings
    nonlocal character
    print("Got message : " + str(request))
    if request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
        elif request.type == "character" and request.id == character._id:
            character.updateSettings(request.settings)
        else:
            console.log("Ignoring character settings, not for ID: ", character._id)
    elif request.action == "get-character":
        character.updateInfo()
        sendResponse(character.getDict())

settings = getDefaultSettings()
character = Character(settings)
updateSettings()
chrome.runtime.onMessage.addListener(handleMessage)
observer = new window.MutationObserver(documentModified)
observer.observe(document, {"subtree": True, "childList": True})
chrome.runtime.sendMessage({"action": "activate-icon"})

