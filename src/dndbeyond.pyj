print("Beyond20: D&D Beyond module loaded.")

ability_abbreviations = {"Strength": "STR",
                         "Dexterity": "DEX",
                         "Constitution": "CON",
                         "Intelligence": "INT",
                         "Wisdom": "WIS",
                         "Charisma": "CHA"}

def getInitiativeModifier():
    initiative = $(".ct-initiative-box__value").text()
    advantage = $(".ct-initiative-box__advantage").length > 0
    if initiative == "":
        initiative = $(".ct-combat-mobile__extra--initiative .ct-combat-mobile__extra-value").text()
        advantage = $(".ct-combat-mobile__advantage").length > 0
    if initiative == "":
        return "+0"
    return (initiative, advantage)

def propertyListToDict(propList):
    properties = {}
    for i in range(propList.length):
        label = propList.eq(i).find(".ct-property-list__property-label").text()[:-1]
        value = propList.eq(i).find(".ct-property-list__property-content").text()
        properties[label] = value
    return properties

def sendRoll(rollType, fallback, args):
    char_name = $(".ct-character-tidbits__name").text()
    req = {"action": "roll", "character": char_name, "type": rollType, "roll": fallback}
    for key in args:
        req[key] = args[key]
    console.log("Sending message: " + str(req))
    chrome.runtime.sendMessage(req);

def onMessage(request, sender, sendResponse):
    if request.action == "execute":
        paneClass = $(".ct-sidebar__pane-content > div")[0].className
        print("Beyond20: Current panel : " + paneClass)
        if paneClass == "ct-skill-pane":
            skill_name = $(".ct-skill-pane__header-name").text()
            ability_name = $(".ct-skill-pane__header-ability").text()
            modifier = $(".ct-skill-pane__header-modifier").text()
            print("Skill " + skill_name + "(" + ability + ") : " + modifier)
            sendRoll("skill", "1d20" + modifier, {"skill": skill_name,
                                                  "ability": ability_name,
                                                  "modifier": modifier} )
        elif paneClass == "ct-ability-pane" or paneClass == "ct-ability-saving-throws-pane":
            ability_string = $("." + paneClass + " .ct-sidebar__heading").text()
            ability_name = ability_string.split(" ")[0]
            modifier = $("." + paneClass + "__modifier .ct-signed-number").text()
            ability = ability_abbreviations[ability_name]
            if paneClass == "ct-ability-pane":
                rollType = "ability"
            else:
                rollType = "saving-throw"
            print(rollType + " " + ability_name + "(" + ability + ") : " + modifier)
            sendRoll(rollType, "1d20" + modifier, {"name" : ability_name,
                                                   "ability": ability,
                                                   "modifier": modifier} )
        elif paneClass == "ct-initiative-pane":
            (modifier, advantage) = getInitiativeModifier()
            roll = "2d20kh1" if advantage else "1d20"
            print("Initiative " + ("with" if advantage else "without") + " advantage : " + modifier)
            sendRoll("initiative", "1d20" + modifier, {"initiative": modifier,
                                                       "advantage": advantage} )
        elif paneClass == "ct-item-pane":
            item_name = $(".ct-item-pane .ct-item-name").text()
            properties = $(".ct-item-pane .ct-property-list .ct-property-list__property")
            properties = propertyListToDict(properties)
            if "Damage" in properties:
                items = $(".ct-combat-attack--item")
                to_hit = "+0"
                for i in range(items.length):
                    if items.eq(i).find(".ct-item-name").text() == item_name:
                        to_hit = items.eq(i).find(".ct-combat-attack__tohit").text()
                        print("To hit for " + item_name + " is : " + to_hit)
                print("Properties are : " + str(properties))
                damage = properties["Damage"]
                if "(" in damage:
                    (damage, versatile_damage) = damage.split("(")
                    versatile_damage = versatile_damage[:-1]
                sendRoll("attack", properties["Damage"], {"weapon": item_name,
                                                          "weapon-type": properties["Attack Type"],
                                                          "to-hit": to_hit,
                                                          "damage": damage,
                                                          "versatile-damage": versatile_damage,
                                                          "damage-type": properties["Damage Type"],
                                                          "reach": properties["Reach"],
                                                          "range": properties["Range"],
                                                          "properties": properties["Properties"].split(", ")})
        else:
            console.log("Sidebar not open")

def panelModified():
    pane = $(".ct-sidebar__pane-content > div")
    if pane.length > 0:
        paneClass = pane[0].className
        print("Beyond20: New side panel is : " + paneClass)

chrome.runtime.onMessage.addListener(onMessage);
#$(".ct-sidebar").on('DOMSubtreeModified', panelModified);
