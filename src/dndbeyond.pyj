from utils import replaceRolls
from settings import getStoredSettings, mergeSettings, character_settings
from elementmaker import E
import uuid
import re

ability_abbreviations = {"Strength": "STR",
                         "Dexterity": "DEX",
                         "Constitution": "CON",
                         "Intelligence": "INT",
                         "Wisdom": "WIS",
                         "Charisma": "CHA"}

skill_abilities = {"Acrobatics": "DEX",
                   "Animal Handling": "WIS",
                   "Arcana": "INT",
                   "Athletics": "STR",
                   "Deception": "CHA",
                   "History": "INT",
                   "Insight": "WIS",
                   "Intimidation": "CHA",
                   "Investigation": "INT",
                   "Medicine": "WIS",
                   "Nature": "INT",
                   "Perception": "WIS",
                   "Performance": "CHA",
                   "Persuasion": "CHA",
                   "Religion": "INT",
                   "Sleight of Hand": "DEX",
                   "Stealth": "DEX",
                   "Survival": "WIS"}


class Character:
    def __init__(self):
        self._abilities = []
        self._name = None
        self._id = None
        self._race = None
        self._level = None
        self._classes = None
        self._ac = None
        self._speed = None
        self._proficiency = None
        self._hp = 0
        self._max_hp = 0
        self._settings = None
        self._class_features = []
        self._racial_traits = []
        self._feats = []

    def updateInfo(self):
        self._id = $("#character-sheet-target").attr("data-character-id")
        if self._settings is None:
            self.updateSettings()

        if self._name is None:
            self._name = $(".ct-character-tidbits__name").text()
            # This can happen when you reload the page
            if self._name == "":
                self._name = None
        if self._ac is None:
            self._ac = $(".ct-armor-class-box__value").text()
            if self._ac == "":
                self._ac = $(".ct-combat-mobile__extra--ac .ct-combat-mobile__extra-value").text()
                if self._ac == "":
                    self._ac = None
        if self._proficiency is None:
            self._proficiency = $(".ct-proficiency-bonus-box__value").text()
            if self._proficiency == "":
                self._proficiency = $(".ct-combat-mobile__extra--proficiency .ct-combat-mobile__extra-value").text()
                if self._proficiency == "":
                    self._proficiency = None
        if self._speed is None:
            self._speed = $(".ct-speed-box__box-value .ct-distance-number__number").text()
            if self._speed == "":
                self._speed = $(".ct-combat-mobile__extra--speed .ct-combat-mobile__extra-value .ct-distance-number__number").text()
                if self._speed == "":
                    self._speed = None
        if len(self._abilities) == 0:
            abilities = $(".ct-quick-info__ability")
            if abilities.length == 0:
                abilities = $(".ct-main-mobile__ability")
            if abilities.length == 0:
                abilities = $(".ct-main-tablet__ability")
            for ability in abilities:
                name = $(ability).find(".ct-ability-summary__heading .ct-ability-summary__label").text()
                abbr = $(ability).find(".ct-ability-summary__heading .ct-ability-summary__abbr").text()
                modifier = $(ability).find(".ct-ability-summary__primary .ct-signed-number").text()
                value = $(ability).find(".ct-ability-summary__secondary").text()
                if modifier == "":
                    modifier = $(ability).find(".ct-ability-summary__secondary .ct-signed-number").text()
                    value = $(ability).find(".ct-ability-summary__primary").text()
                self._abilities.append([name, abbr, value, modifier].as_array())
        if self._race is None:
            self._race = $(".ct-character-tidbits__race").text()
            if self._race == "":
                self._race = None
        if self._classes is None:
            classes = $(".ct-character-tidbits__classes")
            if classes.length > 0:
                classes = classes.text().split(" / ")
                self._classes = {}
                for class_ in classes:
                    (name, level) = class_.split(" ")
                    self._classes[name] = level
        if self._level is None:
            level = $(".ct-character-tidbits__xp-level")
            xp = $(".ct-character-tidbits__xp-bar .ct-xp-bar__item--cur .ct-xp-bar__label")
            if level.length > 0:
                self._level = level.text().replace("Level ", "")
            elif xp.length > 0:
                self._level = xp.text().replace("LVL ", "")
        if self._settings?:
            self.updateHP()
        self.updateFeatures()

    def updateHP(self):
        hp = max_hp = None
        hp_items = $(".ct-health-summary__hp-group--primary .ct-health-summary__hp-item")
        for item in hp_items:
            label = $(item).find(".ct-health-summary__hp-item-label").text() 
            if label == "Current":
                # Make sure it's not an input being modified
                number = $(item).find(".ct-health-summary__hp-item-content .ct-health-summary__hp-number")
                if number.length > 0:
                    hp = int(number.text())
            elif label == "Max":
                max_hp = int($(item).find(".ct-health-summary__hp-item-content .ct-health-summary__hp-number").text())

        mobile_hp = $(".ct-status-summary-mobile__hp-current")
        if mobile_hp.length > 0:
            hp = int(mobile_hp.text())
            max_hp = int($(".ct-status-summary-mobile__hp-max").text())
        if $(".ct-status-summary-mobile__deathsaves-group").length > 0 or \
                $(".ct-health-summary__deathsaves").length > 0:
            # if we find death saving section, then it means the HP is 0
            hp = 0
            max_hp = self._max_hp
        if hp is not None and max_hp is not None and (self._hp != hp or self._max_hp != max_hp):
            self._hp = hp
            self._max_hp = max_hp
            print("HP updated to : " + hp + "/" + max_hp)

            if self._settings and self._settings["update-hp"]:
                req = {"action": "hp-update", "character": self.getDict()}
                console.log("Sending message: " + str(req))
                chrome.runtime.sendMessage(req);
                
    # TODO: Do the same thing for ".ct-feature-snippet-option > .ct-feature-snippet__heading" and
    # build a dict of {feature: option} so we could have things like {"Favored Enemy": "Undead"}, etc..
    # Or maybe just remove the ".ct-feature-snippet > " and have the "Undead" be part of the list of features
    # and just check that the previous one in the list is "Favored Enemy" for example.?
    def featureDetailsToList(self, selector):
        features = $(selector).find(".ct-feature-snippet > .ct-feature-snippet__heading")
        feature_list = []
        for feat in features:
            feature_list.append(feat.childNodes[0].textContent.trim())
        return feature_list

    def getSetting(self, key, default_value=""):
        if self._settings? and self._settings[key]?:
            return self._settings[key]
        return default_value

    def updateFeatures(self):
        update = False
        class_detail = $(".ct-features .ct-classes-detail")
        if class_detail.length > 0:
            self._class_features = self.featureDetailsToList(class_detail)
            list_str = str.join("", self._class_features)
            setting_str = str.join("", self.getSetting("class-features", []))
            if list_str != setting_str:
                console.log("New class feature")
                update = True
        elif self.getSetting("class-features", None):
            self._class_features = list(self._settings["class-features"])
            
        race_detail = $(".ct-features .ct-race-detail")
        if race_detail.length > 0:
            self._racial_traits = self.featureDetailsToList(race_detail)
            list_str = str.join("", self._racial_traits)
            setting_str = str.join("", self.getSetting("racial-traits", []))
            if list_str != setting_str:
                console.log("New race feature")
                update = True
        elif self.getSetting("racial-traits", None):
            self._racial_traits = list(self._settings["racial-traits"])

        feats_detail = $(".ct-features .ct-feats-detail")
        if feats_detail.length > 0:
            self._feats = self.featureDetailsToList(feats_detail)
            feats_str = str.join("", self._feats)
            feats_set_str = str.join("", self.getSetting("feats", []))
            if feats_str != feats_set_str:
                console.log("New Feats")
                update = True
        elif self.getSetting("feats", None):
            self._feats = list(self._settings["feats"])

        if update:
            self.mergeCharacterSettings({"class-features": self._class_features,
                                         "racial-traits": self._racial_traits,
                                         "feats": self._feats})
            
    def mergeCharacterSettings(self, data):
        cb = def(settings):
            chrome.runtime.sendMessage({"action": "settings",
                                        "type": "character",
                                        "id": self._id,
                                        "settings": settings})
        mergeSettings(data, cb, "character-" + self._id, character_settings)

    def updateSettings(self, new_settings=None):
        if new_settings:
            self._settings = new_settings
        else:
            getStoredSettings(def(saved_settings):
                self._settings = saved_settings
                self.updateHP()
                self.updateFeatures()
            , "character-" + self._id, character_settings)

    def getDict(self):
        settings = self._settings
        del settings["class-features"]
        del settings["racial-traits"]
        del settings["feats"]
        return {"name": self._name,
                "id": self._id,
                "type": "Character",
                "abilities": self._abilities.as_array(),
                "classes": self._classes,
                "level": self._level,
                "race": self._race,
                "ac": self._ac,
                "proficiency": self._proficiency,
                "speed": self._speed,
                "hp": self._hp,
                "max-hp": self._max_hp,
                "settings": settings,
                "class-features": self._class_features.as_array(),
                "racial-traits": self._racial_traits.as_array(),
                "feats": self._feats.as_array()}


class Monster:
    def __init__(self, _type):
        self._type = _type
        self._base = ".mon-stat-block" if _type == "Monster" else ".ct-creature-block"
        self._id = None
        self._name = None
        self._meta = None
        self._attributes = {}
        self._ac = None
        self._hp = None
        self._hp_formula = None
        self._speed = None
        self._abilities = []
        self._tidbits = {}
        self._saves = {}
        self._skills = {}
        self._cr = None

    def parseStatBlock(self, stat_block=None):
        base = self._base
        if stat_block is None:
            stat_block = $(base)
        self._name = stat_block.find(base + "__name").text().trim()
        a = stat_block.find(base + "__name-link")
        if a.length > 0:
            self._id = a.attr("href").replace("/monsters/", "")
        else:
            self._id = self._name
        self._meta = stat_block.find(base + "__meta").text().trim()
        attributes = stat_block.find(base + "__attributes " + base + "__attribute")
        for attr in attributes:
            label = $(attr).find(base + "__attribute-label").text().trim()
            value = $(attr).find(base + "__attribute-value").text().trim()
            if value == "":
                value = $(attr).find(base + "__attribute-data").text().trim()
            if label == "Armor Class":
                self._ac = $(attr).find(base + "__attribute-data-value").text().trim()
            elif label == "Hit Points":
                self._hp = $(attr).find(base + "__attribute-data-value").text().trim()
                self._hp_formula = $(attr).find(base + "__attribute-data-extra").text().trim()[1:-1]
                cb = def():
                    self.rollHitPoints()
                addIconButton(cb, $(attr).find(base + "__attribute-data-extra"))
            elif label == "Speed":
                self._speed = value
            self._attributes[label] = value

        abilities = stat_block.find(base + "__abilities")
        if abilities.length > 0:
            prefix = base + "__ability-"
            abilities = abilities.find("> div")
        else:
            abilities = stat_block.find(".ability-block > div")
            prefix = ".ability-block__"
        for ability in abilities:
            abbr = $(ability).find(prefix + "heading").text()
            score = $(ability).find(prefix + "score").text()
            modifier = $(ability).find(prefix + "modifier").text()[1:-1]
            self._abilities.append([abbreviationToAbility(abbr), abbr, score, modifier].as_array())
            makeCB = def(a):
                return def():
                    self.rollAbilityCheck(a)
            addIconButton(makeCB(abbr), ability, prepend=True)
        
        tidbits = stat_block.find(base + "__tidbits " + base + "__tidbit")
        for tidbit in tidbits:
            label = $(tidbit).find(base + "__tidbit-label").text()
            data = $(tidbit).find(base + "__tidbit-data")
            value = data.text().trim()
            if label == "Saving Throws":
                saves = value.split(", ")
                data.html("")
                makeCB = def(a):
                    return def():
                        self.rollSavingThrow(a)
                for save in saves:
                    (abbr, mod) = save.split(" ")
                    self._saves[abbr] = mod
                    data.append(abbr + " " + mod)
                    addIconButton(makeCB(abbr), data, append=True)
                    if len(saves) > len(self._saves):
                        data.append(", ")
            elif label == "Skills":
                skills = value.split(", ")
                for skill in skills:
                    (name, mod) = skill.split(" ")
                    self._skills[name] = mod
                makeCB = def(a):
                    return def():
                        self.rollSkillCheck(a)
                if self._type == "Monster":
                    skills = data.find("> a")
                    for a in skills:
                        skill = a.textContent
                        text = a.nextSibling
                        last = True
                        if text.textContent.endsWith(", "):
                            text.textContent = text.textContent[:-2]
                            last = False
                        addIconButton(makeCB(skill), a.nextSibling)
                        if not last:
                            $(a.nextElementSibling).after(", ")
                else:
                    data.html("")
                    first = True
                    for skill in self._skills:
                        if not first:
                            data.append(", ")
                        first = False
                        data.append(skill + " " + self._skills[skill])
                        addIconButton(makeCB(skill), data, append=True)
                        
            elif label == "Challenge":
                self._cr = value.split(" ")[0]
            self._tidbits[label] = value
        self.lookForActions(stat_block)
        console.log("Done parsing stat block:", self)

    def rollHitPoints(self):
        sendRoll(self, "custom", self._hp_formula, {"name": "Hit Points",
                                                    "modifier": self._hp_formula})

    def rollAbilityCheck(self, abbr):
        for ability in self._abilities:
            if ability[1] == abbr:
                (name, abbr, score, modifier) = ability
                sendRoll(self, "ability", "1d20" + modifier, {"name" : name,
                                                              "ability": abbr,
                                                              "modifier": modifier} )
                break

    def rollSavingThrow(self, abbr):
        mod = self._saves[abbr]
        name = abbreviationToAbility(abbr)
        sendRoll(self, "saving-throw", "1d20" + mod, {"name" : name,
                                                      "ability": abbr,
                                                      "modifier": mod} )

    def rollSkillCheck(self, skill):
        modifier = self._skills[skill]
        ability = skillToAbility(skill)
        sendRoll(self, "skill", "1d20" + modifier, {"skill": skill,
                                                    "ability": ability,
                                                    "modifier": modifier})

    def parseAttackInfo(self, description):
        m = re.search("(Melee|Ranged) Weapon Attack:.*?(\+[0-9]+) to hit.*?, (?:reach|range) (.*?),.*?.", description)
        if m:
            return (m.group(1), m.group(2), m.group(3))
        else:
            return None

    def parseHitInfo(self, description):
        damages = None
        save = None
        hit_idx = description.indexOf("Hit:")
        if hit_idx > 0:
            hit = description[hit_idx:]
        else:
            return None
        damage_regexp = " (?:([0-9]+))?(?: *\(?([0-9]*d[0-9]+(?:\s*[-+]\s*[0-9]+)?)\)?)? ([\w ]+?) damage"
        damage_matches = re.finditer(damage_regexp, hit)
        damages = []
        damage_types = []
        for dmg in damage_matches:
            if dmg.group(2)?:
                damages.append(dmg.group(2))
            else:
                damages.append(dmg.group(1))
            damage_types.append(dmg.group(3))
        m = re.search("DC ([0-9]+) (.*?) saving throw", hit)
        if m:
            save = (m.group(2), m.group(1))
        return (damages, damage_types, save)

    def buildAttackRoll(self, name, description):
        roll_properties = {"name": name,
                           "attack-source": "monster-action",
                           "description": description}

        attackInfo = self.parseAttackInfo(description)
        if not attackInfo:
            return None
        (attack_type, to_hit, reach_range) = attackInfo
        roll_properties["to-hit"] = to_hit
        roll_properties["attack-type"] = attack_type
        roll_properties["reach" if attack_type == "Melee" else "range"] = reach_range


        hitInfo = self.parseHitInfo(description)
        if hitInfo:
            # Can't use '(damages, damage_types, save) = hitInfo' because rapydscript flattens
            # the lists within the list and assigns the strings to each of the 3 vars instead of lists
            damages = hitInfo[0]
            damage_types = hitInfo[1]
            save = hitInfo[2]
            if len(damages) > 0:
                roll_properties["damage"] = damages[0]
                roll_properties["damage-type"] = damage_types[0]
            if len(damages) > 1:
                console.log(damages[1:])
                roll_properties["second-damage"] = str.join(" | ", list(damages[1:]))
                roll_properties["second-damage-type"] = str.join(" | ", list(damage_types[1:]))
            if save:
                roll_properties["save-ability"] = save[0]
                roll_properties["save-dc"] = save[1]
 
        return roll_properties

    def lookForActions(self, stat_block):
        blocks = stat_block.find(self._base + "__description-block")
        makeCB = def(props):
            return def():
                sendRoll(self, "attack", "1d20" + props["to-hit"], props)
        for block in blocks:
            section_name = $(block).find(self._base + "__description-block-heading").text()
            actions = $(block).find(self._base + "__description-block-content p")
            for action in actions:
                console.log("Found action: ", action)
                firstChild = action.firstElementChild
                if firstChild and firstChild.tagName == "EM":
                    action_name = firstChild.textContent[:-1]
                else:
                    injectDiceToRolls(action, self, self._name)
                    continue
                if section_name == "Actions":
                    description = ""
                    nextSibling = firstChild.nextSibling
                    while nextSibling is not None:
                        description += nextSibling.textContent.trim() + " "
                        nextSibling = nextSibling.nextSibling
                    if description[-1] == " ":
                        description = description[:-1]

                    roll_properties = self.buildAttackRoll(action_name, description)
                    if roll_properties:
                        console.log("Roll: ", roll_properties)
                        id = addRollButton(makeCB(roll_properties), action,
                                           small=True, prepend=True, image=True, text=action_name)
                        $("#" + id).css({"float": "", "text-align": ""})
                injectDiceToRolls(action, self, action_name)

    def getDict(self):
        return {"name": self._name,
                "type": self._type,
                "id": self._id,
                "ac": self._ac,
                "hp": self._hp,
                "hp-formula": self._hp_formula,
                "speed": self._speed,
                "abilities": self._abilities.as_array(),
                "saves": self._saves,
                "skills": self._skills,
                "cr": self._cr}


def skillToAbility(skill):
    if skill_abilities[skill]?:
        return skill_abilities[skill]
    return ""

def abbreviationToAbility(abbr):
    for ability in ability_abbreviations:
        if ability_abbreviations[ability] == abbr:
            return ability
    return abbr


def propertyListToDict(propList):
    properties = {}
    for i in range(propList.length):
        label = propList.eq(i).find(".ct-property-list__property-label").text()[:-1]
        value = propList.eq(i).find(".ct-property-list__property-content").text()
        properties[label] = value
    return properties

def descriptionToString(selector, separator="\n"):
    description_p = $(selector).children()
    if description_p.length == 0:
        return $(selector).text()
    description = ""
    for i in range(description_p.length):
        if len(description) > 0:
            description += separator
        description += description_p.eq(i).text()
    return description

def findToHit(name_to_match, items_selector, name_selector, tohit_selector):
    items = $(items_selector)
    for i in range(items.length):
        if items.eq(i).find(name_selector).text() == name_to_match:
            to_hit = items.eq(i).find(tohit_selector)
            if to_hit.length > 0:
                to_hit = to_hit.text()
                print("To hit for " + name_to_match + " is : " + to_hit)
                return to_hit
            break
    return None

def buildAttackRoll(attack_source, name, description, properties, damage=None, damage_type=None, to_hit=None, damage2=None, damage_type2=None):
    roll_properties = {"name": name,
                       "attack-source": attack_source,
                       "description": description}
    if to_hit:
        roll_properties["to-hit"] = to_hit

    if properties["Reach"]?:
        roll_properties["reach"] = properties["Reach"]
        roll_properties["attack-type"] = "Melee"
    elif properties["Range"]?:
        roll_properties["range"] = properties["Range"]
        roll_properties["attack-type"] = "Ranged"
    else:
        range_area = properties["Range/Area"] ? ""
        if "Reach" in range_area:
            roll_properties["attack-type"] = "Melee"
            roll_properties["reach"] = range_area.replace(" Reach", "")
        else:
            roll_properties["attack-type"] = "Ranged"
            roll_properties["range"] = range_area
    if properties["Attack Type"]?:
        roll_properties["attack-type"] = properties["Attack Type"]

    if properties["Attack/Save"]?:
        (save_ability, save_dc) = properties["Attack/Save"].split(" ")
        roll_properties["save-ability"] = abbreviationToAbility(save_ability)
        roll_properties["save-dc"] = save_dc

    if properties["Properties"]?:
        roll_properties["properties"] = properties["Properties"].split(", ")

    if damage is not None:
        roll_properties["damage"] = damage
        roll_properties["damage-type"] = damage_type
    if damage2 is not None:
        roll_properties["second-damage"] = damage2
        roll_properties["second-damage-type"] = damage_type2

    return roll_properties

def sendRoll(character, rollType, fallback, args):
    req = {"action": "roll", "character": character.getDict(), "type": rollType, "roll": fallback}
    for key in args:
        req[key] = args[key]
    console.log("Sending message: " + str(req))
    chrome.runtime.sendMessage(req);

def isRollButtonAdded():
    return $(".ct-beyond20-roll").length > 0

def isCustomRollIconsAdded():
    return $(".ct-beyond20-custom-roll").length > 0

def isHitDieButtonAdded():
    return $(".ct-beyond20-roll-hitdie").length > 0

button_class = "ct-beyond20-roll-button ct-theme-button ct-theme-button--filled ct-theme-button--interactive ct-button character-button"
button_class_small = button_class + " character-button-small"
def addRollButton(callback, where, small=False, append=False, prepend=False, image=True, text="Beyond 20"):
    icon32 = chrome.extension.getURL("images/dice24.png");
    icon16 = chrome.extension.getURL("images/dice16.png");
    id = uuid.uuid4()
    button = E.div(class_="ct-beyond20-roll", id=str(id),
                    E.button(class_=(button_class_small if small else button_class),
                             E.img(class_="ct-beyond20-icon", src=((icon16 if small else icon32) if image else ""),
                                   style=("margin-right: 6px;" if image else "")),
                             E.span(class_="ct-button__content", text)
                             )
                    )

    if append:
        $(where).append(button)
    elif prepend:
        $(where).prepend(button)
    else:
        $(where).after(button)
    $("#" + str(id)).css({"float": "right",
                                "display": "block",
                                "text-align": "center"})
    $("#" + str(id) + " button").on('click', def(event):
        callback()
    )
    return id

def addDisplayButton(callback, where, text="Display in Roll20"):
    button = E.div(class_="ct-beyond20-roll-display",
                   E.button(class_=button_class_small.replace("filled", "outline"),
                            E.span(class_="ct-button__content", text)
                            )
                   )
    $(where).append(button)
    $(".ct-beyond20-roll-button").css({"margin-left": "auto",
                                       "margin-right": "auto"})
    $(".ct-beyond20-roll-display").css("margin-top", "2px")
    $(".ct-beyond20-roll-display").on('click', def(event):
        callback()
    )

def addHitDieButtons(rollCallback):
    icon16 = chrome.extension.getURL("images/icons/icon16.png");
    button = E.div(class_="ct-beyond20-roll-hitdie", style="float: right;",
                    E.img(class_="ct-beyond20-icon", src=icon16, style="margin-right: 6px;"),
                    E.button(class_= button_class_small,
                             E.span(class_="ct-button__content", "Roll Hit Die")
                             )
                    )
    print("Adding Hit Dice buttons")

    $(".ct-reset-pane__hitdie-heading").append(button)
    hitdice = $(".ct-reset-pane__hitdie")
    multiclass = hitdice.length > 1
    for i in range(hitdice.length):
        cb = def(rollCallback, index):
            return def(event):
                rollCallback(multiclass, index)

        $(".ct-beyond20-roll-hitdie").eq(i).on('click', cb(rollCallback, i))

def addIconButton(callback, where, append=False, prepend=False):
    icon16 = chrome.extension.getURL("images/icons/icon16.png");
    id = uuid.uuid4()
    button = E.span(class_="ct-beyond20-roll", id=str(id),
                    style="margin-right:3px; margin-left: 3px;",
                    E.img(class_="ct-beyond20-icon", src=icon16))

    if append:
        $(where).append(button)
    elif prepend:
        $(where).prepend(button)
    else:
        $(where).after(button)
    $("#" + str(id)).on('click', def(event):
        callback()
    )

def removeRollButtons():
    $(".ct-beyond20-roll").remove()
    $(".ct-beyond20-roll-hitdie").remove()
    $(".ct-beyond20-roll-display").remove()
    $(".ct-beyond20-custom-icon").remove()
    custom_rolls = $("u.ct-beyond20-custom-roll")
    for i in range(custom_rolls.length):
        custom_rolls.eq(i).replaceWith(custom_rolls.eq(i).text())

# From https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518

def htmlToFragment(html):
    template = document.createElement('template')
    template.innerHTML = html
    return template.content

def recursiveDiceReplace(node, cb):
    if node.hasChildNodes():
        # We need to copy the list since its size could change as we modify it
        children = list(node.childNodes)
        for child in children:
            recursiveDiceReplace(child, cb)
    elif node.nodeName == "#text":
        text = replaceRolls(False, node.textContent, cb)
        text = replaceRolls(True, text, cb)
        # Only replace if we changed it, otherwise we might break existing html code bindings
        if text != node.textContent:
            document_fragment = htmlToFragment(text)
            node.parentElement.replaceChild(document_fragment, node)

def injectDiceToRolls(selector, character, name=""):
    icon16 = chrome.extension.getURL("images/icons/icon16.png");
    replaceCB = def(dice_formula, modifier):
        return '<u class="ct-beyond20-custom-roll"><strong>' + dice_formula + '</strong>' + \
            '<img class="ct-beyond20-custom-icon" x-beyond20-name="' + name + \
            '" x-beyond20-roll="' + ("1d20" if modifier else "") + dice_formula + '"></img></u>'

    items = $(selector)
    for item in items:
        recursiveDiceReplace(item, replaceCB)

    $(".ct-beyond20-custom-icon").css("margin-right", "3px")
    $(".ct-beyond20-custom-icon").css("margin-left", "3px")
    $(".ct-beyond20-custom-icon").attr("src", icon16)
    $(".ct-beyond20-custom-roll").off('click')
    $(".ct-beyond20-custom-roll").on('click', def(event):
        name = $(event.currentTarget).find("img").attr("x-beyond20-name")
        roll = $(event.currentTarget).find("img").attr("x-beyond20-roll")
        sendRoll(character, "custom", roll, {"name": name})
    )


