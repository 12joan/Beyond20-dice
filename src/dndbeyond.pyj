from utils import replaceRolls
from settings import getDefaultSettings, getStoredSettings, character_settings
from elementmaker import E

print("Beyond20: D&D Beyond module loaded.")

ability_abbreviations = {"Strength": "STR",
                         "Dexterity": "DEX",
                         "Constitution": "CON",
                         "Intelligence": "INT",
                         "Wisdom": "WIS",
                         "Charisma": "CHA"}
settings = getDefaultSettings()

class Character:
    def __init__(self):
        self._abilities = []
        self._name = None
        self._id = None
        self._race = None
        self._level = None
        self._classes = None
        self._ac = None
        self._speed = None
        self._proficiency = None
        self._hp = 0
        self._max_hp = 0
        self._settings = None

    def updateInfo(self):
        self._id = $("#character-sheet-target").attr("data-character-id")
        if self._settings is None:
            self.updateSettings()

        if self._name is None:
            self._name = $(".ct-character-tidbits__name").text()
            # This can happen when you reload the page
            if self._name == "":
                self._name = None
        if self._ac is None:
            self._ac = $(".ct-armor-class-box__value").text()
            if self._ac == "":
                self._ac = $(".ct-combat-mobile__extra--ac .ct-combat-mobile__extra-value").text()
                if self._ac == "":
                    self._ac = None
        if self._proficiency is None:
            self._proficiency = $(".ct-proficiency-bonus-box__value").text()
            if self._proficiency == "":
                self._proficiency = $(".ct-combat-mobile__extra--proficiency .ct-combat-mobile__extra-value").text()
                if self._proficiency == "":
                    self._proficiency = None
        if self._speed is None:
            self._speed = $(".ct-speed-box__box-value .ct-distance-number__number").text()
            if self._speed == "":
                self._speed = $(".ct-combat-mobile__extra--speed .ct-combat-mobile__extra-value .ct-distance-number__number").text()
                if self._speed == "":
                    self._speed = None
        if len(self._abilities) == 0:
            abilities = $(".ct-quick-info__ability")
            if abilities.length == 0:
                abilities = $(".ct-main-mobile__ability")
            for ability in abilities:
                name = $(ability).find(".ct-ability-summary__heading .ct-ability-summary__label").text()
                abbr = $(ability).find(".ct-ability-summary__heading .ct-ability-summary__abbr").text()
                modifier = $(ability).find(".ct-ability-summary__primary .ct-signed-number").text()
                value = $(ability).find(".ct-ability-summary__secondary").text()
                if modifier == "":
                    modifier = $(ability).find(".ct-ability-summary__secondary .ct-signed-number").text()
                    value = $(ability).find(".ct-ability-summary__primary").text()
                self._abilities.append([name, abbr, value, modifier].as_array())
        if self._race is None:
            self._race = $(".ct-character-tidbits__race").text()
            if self._race == "":
                self._race = None
        if self._classes is None:
            classes = $(".ct-character-tidbits__classes")
            if classes.length > 0:
                classes = classes.text().split(" / ")
                self._classes = {}
                for class_ in classes:
                    (name, level) = class_.split(" ")
                    self._classes[name] = level
        if self._level is None:
            level = $(".ct-character-tidbits__xp-level")
            xp = $(".ct-character-tidbits__xp-bar .ct-xp-bar__item--cur .ct-xp-bar__label")
            if level.length > 0:
                self._level = level.text().replace("Level ", "")
            elif xp.length > 0:
                self._level = xp.text().replace("LVL ", "")
        character.updateHP()

    def updateHP(self):
        hp = max_hp = None
        hp_items = $(".ct-health-summary__hp-group--primary .ct-health-summary__hp-item")
        for item in hp_items:
            label = $(item).find(".ct-health-summary__hp-item-label").text() 
            if label == "Current":
                # Make sure it's not an input being modified
                number = $(item).find(".ct-health-summary__hp-item-content .ct-health-summary__hp-number")
                if number.length > 0:
                    hp = int(number.text())
            elif label == "Max":
                max_hp = int($(item).find(".ct-health-summary__hp-item-content .ct-health-summary__hp-number").text())

        mobile_hp = $(".ct-status-summary-mobile__hp-current")
        if mobile_hp.length > 0:
            hp = int(mobile_hp.text())
            max_hp = int($(".ct-status-summary-mobile__hp-max").text())

        if hp and max_hp and (self._hp != hp or self._max_hp != max_hp):
            self._hp = hp
            self._max_hp = max_hp
            print("HP updated to : " + hp + "/" + max_hp)

            if self._settings and self._settings["update-hp"]:
                req = {"action": "hp-update", "character": self.getDict()}
                console.log("Sending message: " + str(req))
                chrome.runtime.sendMessage(req);
            

    def updateSettings(self, new_settings=None):
        if new_settings:
            self._settings = new_settings
        else:
            getStoredSettings(def(saved_settings):
                self._settings = saved_settings
            , "character-" + self._id, character_settings)

    def getDict(self):
        return {"name": self._name,
                "id": self._id,
                "abilities": self._abilities.as_array(),
                "classes": self._classes,
                "level": self._level,
                "race": self._race,
                "ac": self._ac,
                "proficiency": self._proficiency,
                "speed": self._speed,
                "hp": self._hp,
                "max-hp": self._max_hp,
                "settings": self._settings}

character = Character()

def propertyListToDict(propList):
    properties = {}
    for i in range(propList.length):
        label = propList.eq(i).find(".ct-property-list__property-label").text()[:-1]
        value = propList.eq(i).find(".ct-property-list__property-content").text()
        properties[label] = value
    return properties

def descriptionToString(selector, separator="\n"):
    description_p = $(selector).children()
    if description_p.length == 0:
        return $(selector).text()
    description = ""
    for i in range(description_p.length):
        if len(description) > 0:
            description += separator
        description += description_p.eq(i).text()
    return description

def findToHit(name_to_match, items_selector, name_selector, tohit_selector):
    items = $(items_selector)
    for i in range(items.length):
        if items.eq(i).find(name_selector).text() == name_to_match:
            to_hit = items.eq(i).find(tohit_selector)
            if to_hit.length > 0:
                to_hit = to_hit.text()
                print("To hit for " + name_to_match + " is : " + to_hit)
                return to_hit
            break
    return None

def buildAttackRoll(attack_source, name, description, properties, damage=None, damage_type=None, to_hit=None, damage2=None, damage_type2=None):
    roll_properties = {"name": name,
                       "attack-source": attack_source,
                       "description": description}
    if to_hit:
        roll_properties["to-hit"] = to_hit

    if properties["Reach"]?:
        roll_properties["reach"] = properties["Reach"]
        roll_properties["attack-type"] = "Melee"
    elif properties["Range"]?:
        roll_properties["range"] = properties["Range"]
        roll_properties["attack-type"] = "Ranged"
    else:
        range_area = properties["Range/Area"] ? ""
        if "Reach" in range_area:
            roll_properties["attack-type"] = "Melee"
            roll_properties["reach"] = range_area.replace(" Reach", "")
        else:
            roll_properties["attack-type"] = "Ranged"
            roll_properties["range"] = range_area
    if properties["Attack Type"]?:
        roll_properties["attack-type"] = properties["Attack Type"]

    if properties["Attack/Save"]?:
        (save_ability, save_dc) = properties["Attack/Save"].split(" ")
        roll_properties["save-ability"] = save_ability
        roll_properties["save-dc"] = save_dc
        for ability in ability_abbreviations:
            if ability_abbreviations[ability] == save_ability:
                roll_properties["save-ability"] = ability
                break

    if properties["Properties"]?:
        roll_properties["properties"] = properties["Properties"].split(", ")

    if damage is not None:
        roll_properties["damage"] = damage
        roll_properties["damage-type"] = damage_type
    if damage2 is not None:
        roll_properties["second-damage"] = damage2
        roll_properties["second-damage-type"] = damage_type2

    return roll_properties

def sendRoll(rollType, fallback, args):
    nonlocal character

    req = {"action": "roll", "character": character.getDict(), "type": rollType, "roll": fallback}
    for key in args:
        req[key] = args[key]
    console.log("Sending message: " + str(req))
    chrome.runtime.sendMessage(req);

def rollSkillCheck(paneClass):
    skill_name = $("." + paneClass + "__header-name").text()
    ability = $("." + paneClass + "__header-ability").text()
    modifier = $("." + paneClass + "__header-modifier").text()
    proficiency = $("." + paneClass + "__header-icon .ct-tooltip").attr("data-original-title")
    print("Skill " + skill_name + "(" + ability + ") : " + modifier)
    sendRoll("skill", "1d20" + modifier, {"skill": skill_name,
                                          "ability": ability,
                                          "modifier": modifier,
                                          "proficiency": proficiency})

def rollAbilityOrSavingThrow(paneClass, rollType):
    ability_string = $("." + paneClass + " .ct-sidebar__heading").text()
    ability_name = ability_string.split(" ")[0]
    modifier = $("." + paneClass + "__modifier .ct-signed-number").text()
    ability = ability_abbreviations[ability_name]
    print(rollType + " " + ability_name + "(" + ability + ") : " + modifier)
    sendRoll(rollType, "1d20" + modifier, {"name" : ability_name,
                                           "ability": ability,
                                           "modifier": modifier} )

def rollAbilityCheck():
    rollAbilityOrSavingThrow("ct-ability-pane", "ability")

def rollSavingThrow():
    rollAbilityOrSavingThrow("ct-ability-saving-throws-pane", "saving-throw")

def rollInitiative():
    initiative = $(".ct-initiative-box__value").text()
    advantage = $(".ct-initiative-box__advantage").length > 0
    if initiative == "":
        initiative = $(".ct-combat-mobile__extra--initiative .ct-combat-mobile__extra-value").text()
        advantage = $(".ct-combat-mobile__advantage").length > 0
    roll = "2d20kh1" if advantage else "1d20"
    print("Initiative " + ("with" if advantage else "without") + " advantage : " + initiative)
    sendRoll("initiative", "1d20" + initiative, {"initiative": initiative,
                                                 "advantage": advantage} )

        
def rollHitDie(multiclass, index):
    print("Rolling hit die index " + index)
    hitdie = $(".ct-reset-pane__hitdie").eq(index)
    class_name = hitdie.find(".ct-reset-pane__hitdie-heading-class").text()
    text = hitdie.find(".ct-reset-pane__hitdie-heading").text()
    die = text.split("Hit Die: ")[1].split(" ")[0]
    sendRoll("hit-dice", die, {"class": class_name,
                               "multiclass": multiclass,
                               "hit-dice": die} )

def rollItem(force_display=False):
    prop_list = $(".ct-item-pane .ct-property-list .ct-property-list__property")
    properties = propertyListToDict(prop_list)
    print("Properties are : " + str(properties))
    item_name = $(".ct-item-pane .ct-item-name").text()
    item_type = $(".ct-item-detail__intro").text()
    description = descriptionToString(".ct-item-detail__description")
    if force_display is False and "Damage" in properties:
        to_hit = properties["To Hit"] ? \
            findToHit(item_name, ".ct-combat-attack--item", ".ct-item-name", ".ct-combat-attack__tohit")

        damage = None
        damage2 = None
        damage2_type = None
        for i in range(prop_list.length):
            if prop_list.eq(i).find(".ct-property-list__property-label").text() == "Damage:":
                value = prop_list.eq(i).find(".ct-property-list__property-content")
                damage = value.find(".ct-damage__value").text()
                versatile_damage = value.find(".ct-item-detail__versatile-damage").text()
                if versatile_damage != "":
                    damage2 = versatile_damage[1:-1]
                    damage2_type = "Two-Handed"
                additional_damages = value.find(".ct-item-detail__additional-damage")
                for j in range(additional_damages.length):
                    dmg = additional_damages.eq(j).text()
                    dmg_type = additional_damages.eq(j).find(".ct-damage-type-icon .ct-tooltip").attr("data-original-title")
                    dmg_info = additional_damages.eq(j).find(".ct-item-detail__additional-damage-info").text()
                    if dmg != "":
                        dmg = dmg.replace(dmg_info, "")
                        if damage2 is None:
                            damage2 = dmg
                            damage2_type = dmg_type
                        else:
                            damage2 += " | " + dmg
                            damage2_type += " | " + dmg_type
                            if dmg_info != "":
                                damage2_type += "(" + dmg_info + ")"
                            
                break
        damage = properties["Damage"]
        versatile_damage = None
        if "(" in damage:
            (damage, versatile_damage) = damage.split("(")
            versatile_damage = versatile_damage[:-1]

        roll_properties = buildAttackRoll("item",
                                          item_name,
                                          description,
                                          properties,
                                          damage,
                                          properties["Damage Type"] ? "",
                                          to_hit,
                                          damage2,
                                          damage2_type)
        roll_properties["item-type"] = item_type
        sendRoll("attack", damage, roll_properties)
    else:
        sendRoll("item", 0, {"name": item_name,
                             "description" : description,
                             "item-type": item_type})        

def rollAction(paneClass):
    properties = propertyListToDict($("." + paneClass + " .ct-property-list .ct-property-list__property"))
    print("Properties are : " + str(properties))
    action_name = $(".ct-sidebar__heading").text()
    description = descriptionToString(".ct-action-detail__description")
    if "Damage" in properties and (properties["To Hit"]? or properties["Attack/Save"]?):
        roll_properties = buildAttackRoll("action",
                                          action_name,
                                          description,
                                          properties,
                                          properties["Damage"],
                                          properties["Damage Type"] ? "",
                                          properties["To Hit"] ? None)
        sendRoll("attack", properties["Damage"], roll_properties)
    else:
        sendRoll("action", 0, {"name": action_name,
                               "description" : description})
        
def rollSpell(force_display=False):
    properties = propertyListToDict($(".ct-spell-pane .ct-property-list .ct-property-list__property"))
    print("Properties are : " + str(properties))
    spell_name = $(".ct-sidebar__heading .ct-spell-name").text()
    description = descriptionToString(".ct-spell-pane .ct-spell-detail__description")
    damages = $(".ct-spell-pane .ct-spell-caster__modifiers--damages .ct-spell-caster__modifier--damage")
    healings = $(".ct-spell-pane .ct-spell-caster__modifiers--healing .ct-spell-caster__modifier--hp")
    castas = $(".ct-spell-caster__casting-level-current").text()
    level = descriptionToString(".ct-spell-pane .ct-spell-detail__level-school", " ")
    concentration = $(".ct-spell-pane .ct-spell-name__icon--concentration").length > 0
    ritual = $(".ct-spell-pane .ct-spell-name__icon--ritual").length > 0
    duration = properties["Duration"] ? ""
    if "Concentration" in duration:
        duration = duration.replace("Concentration, ", "")
        concentration = True
    else:
        concentration = False
    to_hit = properties["To Hit"] ? \
        findToHit(spell_name, ".ct-combat-attack--spell", ".ct-spell-name", ".ct-combat-attack__tohit")
    if not to_hit:
        to_hit = findToHit(spell_name, ".ct-spells-spell", ".ct-spell-name", ".ct-spells-spell__tohit")

    if force_display is False and (damages.length > 0 or healings.length > 0 or to_hit != None):
        num_damages = 0
        damage = None
        damage2 = None
        for i in range(damages.length):
            dmg = damages.eq(i).find(".ct-spell-caster__modifier-amount").text()
            dmgtype = damages.eq(i).find(".ct-damage-type-icon .ct-tooltip").attr("data-original-title")
            if not dmgtype?:
                dmgtype = ""
            if num_damages == 0:
                damage = dmg
                damage_type = dmgtype
            elif num_damages == 1:
                damage2 = dmg
                damage2_type = dmgtype
            else:
                damage2 += " | " + dmg
                damage2_type += " | " + dmgtype
            num_damages += 1
        for i in range(healings.length):
            dmg = healings.eq(i).find(".ct-spell-caster__modifier-amount").text()
            if num_damages == 0:
                damage = dmg
                damage_type = "Healing"
            elif num_damages == 1:
                damage2 = dmg
                damage2_type = "Healing"
            else:
                damage2 += " | " + dmg
                damage2_type += " | " + "Healing"
            num_damages += 1
            
                
        roll_properties = buildAttackRoll("spell",
                                          spell_name,
                                          description,
                                          properties,
                                          damage,
                                          damage_type,
                                          to_hit,
                                          damage2,
                                          damage2_type)
        spell_properties = {"level-school": level,
                            "concentration": concentration,
                            "duration": duration,
                            "casting-time": (properties["Casting Time"] ? ""),
                            "components": (properties["Components"] ? ""),
                            "ritual": ritual}
        for key in spell_properties:
            roll_properties[key] = spell_properties[key]
        if castas != "" and not level.startsWith(castas):
            roll_properties["cast-at"] = castas
        sendRoll("spell-attack", damage, roll_properties)
    else:
        roll_properties = {"name": spell_name,
                           "level-school": level,
                           "range": (properties["Range/Area"] ? ""),
                           "concentration": concentration,
                           "duration": duration,
                           "casting-time": (properties["Casting Time"] ? ""),
                           "components": (properties["Components"] ? ""),
                           "ritual": ritual,
                           "description" : description}
        if castas != "" and not level.startsWith(castas):
            roll_properties["cast-at"] = castas
        sendRoll("spell-card", 0, roll_properties)

def displayItem():
    rollItem(True)

def displaySpell():
    rollSpell(True)

def displayFeature(paneClass):
    source_types = {"ct-class-feature-pane": "Class",
               "ct-racial-trait-pane": "Race",
               "ct-feat-pane": "Feat"}
    name = $(".ct-sidebar__heading").text()
    source = $(".ct-sidebar__header-parent").text()
    source_type = source_types[paneClass]
    description = descriptionToString(".ct-snippet__content")
    sendRoll("feature", 0, {"name": name,
                            "source": source,
                            "source-type": source_type,
                            "description": description} )

def displayTrait():
    trait = $(".ct-sidebar__heading").text()
    description = $(".ct-trait-pane__input").text()
    sendRoll("trait", 0, {"name": trait,
                            "description": description} )

def execute(paneClass):
    print("Beyond20: Executing panel : " + paneClass)
    if paneClass in ["ct-skill-pane", "ct-custom-skill-pane"]:
        rollSkillCheck(paneClass)
    elif paneClass == "ct-ability-pane":
        rollAbilityCheck()
    elif paneClass == "ct-ability-saving-throws-pane":
        rollSavingThrow()
    elif paneClass == "ct-initiative-pane":
        rollInitiative()
    elif paneClass == "ct-item-pane":
        rollItem()
    elif paneClass in ["ct-action-pane", "ct-custom-action-pane"]:
        rollAction(paneClass)
    elif paneClass == "ct-spell-pane":
        rollSpell()
    else:
        displayPanel(paneClass)

def displayPanel(paneClass):
    print("Beyond20: Displaying panel : " + paneClass)
    if paneClass == "ct-item-pane":
        displayItem()
    elif paneClass == "ct-spell-pane":
        displaySpell()
    elif paneClass in ["ct-class-feature-pane", "ct-racial-trait-pane", "ct-feat-pane"]:
        displayFeature(paneClass)
    elif paneClass == "ct-trait-pane":
        displayTrait()
    else:
        alert("Not recognizing the currently open sidebar")

def isRollButtonAdded():
    return $(".ct-beyond20-roll").length > 0

def isHitDieButtonAdded():
    return $(".ct-beyond20-roll-hitdie").length > 0

button_class = "ct-beyond20-roll-button ct-theme-button ct-theme-button--filled ct-theme-button--interactive ct-button character-button"
button_class_small = button_class + " character-button-small"
def addRollButton(paneClass, where, small=False, append=False, image=True, text="Beyond 20", bind=True):
    icon32 = chrome.extension.getURL("images/dice24.png");
    icon16 = chrome.extension.getURL("images/dice16.png");
    button = E.div(class_="ct-beyond20-roll",
                    E.button(class_=(button_class_small if small else button_class),
                             E.img(class_="ct-beyond20-icon", src=((icon16 if small else icon32) if image else ""),
                                   style=("margin-right: 6px;" if image else "")),
                             E.span(class_="ct-button__content", text)
                             )
                    )

    if append:
        $(where).append(button)
    else:
        $(where).after(button)
    $(".ct-beyond20-roll").css({"float": "right",
                                "display": "block",
                                "text-align": "center"})
    if bind:
        $(".ct-beyond20-roll-button").bind('click', def(event):
            execute(paneClass)
        )

def addDisplayButton(paneClass, where, text="Display in Roll20"):
    button = E.div(class_="ct-beyond20-roll-display",
                   E.button(class_=button_class_small.replace("filled", "outline"),
                            E.span(class_="ct-button__content", text)
                            )
                   )
    $(where).append(button)
    $(".ct-beyond20-roll-button").css({"margin-left": "auto",
                                       "margin-right": "auto"})
    $(".ct-beyond20-roll-display").css("margin-top", "2px")
    $(".ct-beyond20-roll-display").bind('click', def(event):
        displayPanel(paneClass)
    )
def addHitDieButtons():
    icon16 = chrome.extension.getURL("images/icons/icon16.png");
    button = E.div(class_="ct-beyond20-roll-hitdie", style="float: right;",
                    E.img(class_="ct-beyond20-icon", src=icon16, style="margin-right: 6px;"),
                    E.button(class_= button_class_small,
                             E.span(class_="ct-button__content", "Roll Hit Die")
                             )
                    )
    print("Adding Hit Dice buttons")

    $(".ct-reset-pane__hitdie-heading").append(button)
    hitdice = $(".ct-reset-pane__hitdie")
    multiclass = hitdice.length > 1
    for i in range(hitdice.length):
        cb = def(index):
            return def(event):
                rollHitDie(multiclass, index)

        $(".ct-beyond20-roll-hitdie").eq(i).bind('click', cb(i))

def addDeathSaveButton(paneClass, where):
    icon16 = chrome.extension.getURL("images/icons/icon16.png");
    button = E.span(class_="ct-beyond20-roll",
                    E.img(class_="ct-beyond20-icon", src=icon16))

    print("Adding")
    $(where).after(button)
    $(".ct-beyond20-roll").bind('click', def(event):
        sendRoll("death-save", "1d20", {})
    )

def removeRollButtons():
    $(".ct-beyond20-roll").remove()
    $(".ct-beyond20-roll-hitdie").remove()
    $(".ct-beyond20-roll-display").remove()
    $(".ct-beyond20-custom-icon").remove()
    custom_rolls = $("u.ct-beyond20-custom-roll")
    for i in range(custom_rolls.length):
        custom_rolls.eq(i).replaceWith(custom_rolls.eq(i).text())

def injectDiceToRolls(selector, name=""):
    nonlocal settings
    if not settings["subst-dndbeyond"]:
        return

    text = $(selector).html()
    icon16 = chrome.extension.getURL("images/icons/icon16.png");
    pre_original='<u class="ct-beyond20-custom-roll"><strong>'
    post_original='</strong>'
    pre_dice='<img class="ct-beyond20-custom-icon" x-beyond20-name="' + name + \
        '" x-beyond20-roll="'
    post_dice='"></img></u>'
    text = replaceRolls(False, text, True, pre_original, post_original, pre_dice, post_dice)
    text = replaceRolls(True, text, True, pre_original, post_original, pre_dice + "1d20", post_dice)
    $(selector).html(text)
    $(".ct-beyond20-custom-icon").css("margin-right", "3px")
    $(".ct-beyond20-custom-icon").css("margin-left", "3px")
    $(".ct-beyond20-custom-icon").attr("src", icon16)
    $(".ct-beyond20-custom-roll").bind('click', def(event):
        name = $(event.currentTarget).find("img").attr("x-beyond20-name")
        roll = $(event.currentTarget).find("img").attr("x-beyond20-roll")
        sendRoll("custom", roll, {"name": name})
    )

lastItemName = ""
lastSpellName = ""
lastSpellLevel = ""
def injectRollButton(paneClass):
    if paneClass in ["ct-custom-skill-pane",
                     "ct-skill-pane",
                     "ct-ability-pane",
                     "ct-ability-saving-throws-pane",
                     "ct-initiative-pane"]:
        if isRollButtonAdded():
            return
        addRollButton(paneClass, ".ct-sidebar__heading")
    elif paneClass in ["ct-class-feature-pane", "ct-racial-trait-pane", "ct-feat-pane"]:
        if isRollButtonAdded():
            return
        addRollButton(paneClass, ".ct-sidebar__heading", text="Display in Roll20", image=False)
        name = $(".ct-sidebar__heading").text()
        injectDiceToRolls(".ct-snippet__content", name)
    elif paneClass == "ct-trait-pane":
        if isRollButtonAdded():
            return
        addRollButton(paneClass, ".ct-trait-pane__content", text="Display in Roll20", image=False)
    elif paneClass == "ct-item-pane":
        nonlocal lastItemName
        item_name = $(".ct-item-pane .ct-item-name").text()
        if isRollButtonAdded() and item_name == lastItemName:
            return
        lastItemName = item_name
        removeRollButtons()

        injectDiceToRolls(".ct-item-detail__description", item_name)
        properties = propertyListToDict($(".ct-item-pane .ct-property-list .ct-property-list__property"))
        if "Damage" in properties:
            addRollButton(paneClass, ".ct-sidebar__heading", small=True)
            addDisplayButton(paneClass, ".ct-beyond20-roll")
        else:
            addRollButton(paneClass, ".ct-sidebar__heading", image=False, bind=False)
            addRollButton(paneClass, ".ct-item-detail__actions", small=True, append=True, image=False)
    elif paneClass in ["ct-action-pane", "ct-custom-action-pane"]:
        if isRollButtonAdded():
            return
        addRollButton(paneClass, ".ct-sidebar__heading")
        action_name = $(".ct-sidebar__heading").text()
        injectDiceToRolls(".ct-action-detail__description", action_name)
    elif paneClass == "ct-spell-pane":
        nonlocal lastSpellName
        nonlocal lastSpellLevel
        spell_name = $(".ct-sidebar__heading .ct-spell-name").text()
        spell_level = $(".ct-spell-caster__casting-level-current").text()
        if isRollButtonAdded() and spell_name == lastSpellName and spell_level == lastSpellLevel:
            return
        lastSpellName = spell_name
        lastSpellLevel = spell_level
        removeRollButtons()
        injectDiceToRolls(".ct-spell-pane .ct-spell-detail__description", spell_name)

        damages = $(".ct-spell-pane .ct-spell-caster__modifiers--damages .ct-spell-caster__modifier--damage")
        healings = $(".ct-spell-pane .ct-spell-caster__modifiers--healing .ct-spell-caster__modifier--hp")
        properties = propertyListToDict($(".ct-spell-pane .ct-property-list .ct-property-list__property"))
        to_hit = properties["To Hit"] ? \
            findToHit(spell_name, ".ct-combat-attack--spell", ".ct-spell-name", ".ct-combat-attack__tohit")
        if not to_hit:
            to_hit = findToHit(spell_name, ".ct-spells-spell", ".ct-spell-name", ".ct-spells-spell__tohit")

        if damages.length > 0 or healings.length > 0 or to_hit != None:
            addRollButton(paneClass, ".ct-sidebar__heading", text="Cast on Roll20", small=True)
            addDisplayButton(paneClass, ".ct-beyond20-roll")
        else:
            addRollButton(paneClass, ".ct-sidebar__heading", text="Cast on Roll20", image=False)

        $(".ct-spell-caster__casting-action > button").bind('click', def(event):
            execute(paneClass)
        )
    elif paneClass == "ct-reset-pane":
        hitdice = $(".ct-reset-pane__hitdie")
        if hitdice.length > 0:
            if isHitDieButtonAdded():
                return
            removeRollButtons()
            addHitDieButtons()
        else:
            removeRollButtons()
    elif paneClass == "ct-health-manage-pane":
        if $(".ct-health-manage-pane .ct-health-manager__deathsaves").length > 0:
            if isRollButtonAdded():
                return
            
            addDeathSaveButton(paneClass, ".ct-health-manager__deathsaves-group--fails")
        else:
            removeRollButtons()
    else:
        removeRollButtons()


def injectRollToSpellAttack():
    groups = $(".ct-spells-level-casting__info-group")

    for group in groups:
        label = $(group).find(".ct-spells-level-casting__info-label")
        if label.text() == "Spell Attack":
            if label.hasClass("beyond20-rolls-added"):
                return
            label.addClass("beyond20-rolls-added")
            icon16 = chrome.extension.getURL("images/icons/icon16.png");
            items = $(group).find(".ct-spells-level-casting__info-item")
            for item in items:
                modifier = item.textContent
                name = "Spell Attack"
                if items.length > 1:
                    name += "(" + item.getAttribute("data-original-title") + ")"
                img = E.img(class_="ct-beyond20-custom-icon ct-beyond20-spell-attack",
                            x_beyond20_name=name, x_beyond20_modifier=modifier, src=icon16)
                item.append(img)
                console.log(item)
            $(".ct-beyond20-custom-icon").css("margin-left", "3px")
            $(".ct-beyond20-spell-attack").bind('click', def(event):
                name = $(event.currentTarget).attr("x-beyond20-name")
                mod = $(event.currentTarget).attr("x-beyond20-modifier")
                sendRoll("custom", "1d20" + mod, {"name": name, "modifier": mod})
            )
        
def documentModified(mutations, observer):
    nonlocal character

    try:
        chrome.extension.getURL("")
    except:
        console.log("This extension is DOWN!")
        observer.disconnect()
        return

    injectRollToSpellAttack()

    pane = $(".ct-sidebar__pane-content > div")
    character.updateInfo()
    if pane.length > 0:
        for div in range(pane.length):
            paneClass = pane[div].className
            if paneClass == "ct-sidebar__pane-controls":
                continue
            print("Beyond20: New side panel is : " + paneClass)
            injectRollButton(paneClass)

def updateSettings(new_settings=None):
    nonlocal settings
    if new_settings:
        settings = new_settings
    else:
        getStoredSettings(def(saved_settings):
            nonlocal settings
            settings = saved_settings
        )

def handleMessage (request, sender, sendResponse):
    nonlocal settings
    nonlocal character
    print("Got message : " + str(request))
    if request.action == "settings":
        if request.type == "general":
            updateSettings(request.settings)
        elif request.type == "character" and request.id == character._id:
            character.updateSettings(request.settings)
        else:
            console.log("Ignoring character settings, not for ID: ", character._id)
    elif request.action == "get-character":
        character.updateInfo()
        sendResponse(character.getDict())

updateSettings()
chrome.runtime.onMessage.addListener(handleMessage)
observer = new window.MutationObserver(documentModified)
observer.observe(document, {"subtree": True, "childList": True})
chrome.runtime.sendMessage({"action": "activate-icon"});
documentModified()

