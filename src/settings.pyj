from elementmaker import E 
from utils import getBrowser, roll20TabTitle

# key: [short title, title, description, type, default, extra_options]
# Types: bool, string, combobox, link
# combobox extra_options: {setting: label}
# special extra_options: [setup, set, get]

options_list = {
    "whispers": {"short": "Whisper all rolls",
                 "title": "Whisper all rolls to the DM",
                 "description": "If enabled, all the rolls will be whispered to the DM",
                 "type": "bool",
                 "default": False},

    "whisper-monsters": {"short": "Whisper monster rolls",
                         "title": "Whisper monster rolls to the DM",
                         "description": "If enabled, all the rolls from monster stat blocks will be whispered to the DM",
                         "type": "bool",
                         "default": True},

    "roll-advantage": {"short": "Roll with Advantage",
                       "title": "Always roll Advantange/Disadvantage",
                       "description": "Always roll a second dice for Advantage/Disadvantage",
                       "type": "bool",
                       "default": True},

    "initiative-tracker": {"short": "Add Initiative to tracker",
                           "title": "Add initiative roll to the Turn Tracker",
                           "description": "Adds the result of the initiative roll to the turn tracker.\nThis requires you to have a token selected in Roll20, and will also change the way the output of 'Advantage on initiative' rolls appear",
                           "type": "bool",
                           "default": True},

    "subst-roll20": {"title": "Replace Dices formulas in Roll20",
                     "description": "In Roll20, if a spell card or an item or a feat has a dice formula in its description,\nenabling this will make the formula clickable to generate the roll in chat.",
                     "type": "bool",
                     "default": True},

    "subst-dndbeyond": {"title": "Replace Dices formulas in D&D Beyond",
                        "description": "In the D&D Beyond side panel, if a spell, item, feat or action has a dice formula in its description,\nenabling this will add a dice icon next to the formula to allow you to roll it.",
                        "type": "bool",
                        "default": True},

    "crit-prefix": {"title": "Critical Hit Prefix",
                    "description": "Prefix to add to the Critical Hit dice result.\nI've found it less confusing for players to point out that the '+ X' is the crit damage",
                    "type": "string",
                    "default": "Crit: "},

    "components-display": {"title": "Components to display in spell attacks",
                           "description": "When doing a spell attack, what components to show alongside the spell roll.",
                           "type": "combobox",
                           "default": "all",
                           "choices": {"all": "All components", "material": "Only material components", "none": "Do not display anything"}},
    
    "component-prefix": {"title": "Component Prefix",
                         "description": "Prefix to add to the display of the components of a spell during an attack.\nYou may want to change it to 'Materials used :' for example, if only displaying material components",
                         "type": "string",
                         "default": "Components: "},

    "template": {"title": "Roll20 Character Sheet Setting",
                 "description": "Select the Character Sheet Template that you use in Roll20\nIf the templates do not match, you will not see anything printed in the Roll20 chat.",
                 "type": "combobox",
                 "default": "roll20",
                 "choices": {"roll20": "D&D 5E By Roll20", "default": "Other templates"}},

    "donate": {"short": "Buy me rations for 1 day",
               "title": "Donate to show your appreciation!",
               "description": "I know you already appreciate this extension, otherwise you wouldn't be using it!\nBut if you wish to donate to help keep development active or just to say thank you, you can!",
               "type": "link", 
               "default": "https://www.paypal.me/KaKaRoTo",
               "icon": "images/donate.png"},

    "roll20-tab": {"title": "Select the Roll20 tab or campaign to send rolls to", 
                   "description": "Select the tab to send rolls to or the specific campaign name.\nYou can select the campaign or tab from the extension's popup menu in the Roll20 tab itself.\nAfter a specific tab is selected and that tab is closed, it will revert to sending rolls to the same campaign.",
                   "type": "special",
                   "default": None}, # callbacks will be added after the functions are defined

    "show-changelog": {"title": "Show Changelog when installing a new version",
                       "description": "When a new version is released and the extension has been updated,\nopen the changelog in a new window",
                       "type": "bool",
                       "default": True},
    "last-version": {"description": "Last version that was installed. Used to check if an update just happened",
                     "type": "hidden",
                     "default": ""}
    }

character_settings = {
    "rogue-sneak-attack": {"title": "Rogue: Sneak Attack",
                           "description": "Send Sneak Attack damage with each attack roll",
                           "type": "bool",
                           "default": True},
    "cleric-disciple-life": {"title": "Cleric: Disciple of Life",
                             "description": "Send Disciple of Life healing bonus",
                             "type": "bool",
                             "default": False},
    "bard-joat": {"title": "Bard: Jack of All Trades",
                  "description": "Add JoaT bonus to raw ability checks",
                  "type": "bool",
                  "default": True},
    "sharpshooter": {"title": "Sharpshooter: Apply to next Roll",
                     "description": "Apply Sharpshooter -5 penalty to roll and +10 to damage",
                     "type": "bool",
                     "default": False},
    "great-weapon-master": {"title": "Great Weapon Master: Apply to next Roll",
                            "description": "Apply Great Weapon Master -5 penalty to roll and +10 to damage",
                            "type": "bool",
                            "default": False},
    "update-hp": {"title": "Update Roll20 Token HP",
                  "description": "When changing HP here, update it in Roll20 tokens and sheets",
                  "type": "bool",
                  "default": True}
}


def storageGet(name, default_value, cb):
    chrome.storage.sync.get({name: default_value}, def (items):
        cb(items[name])
    )

def storageSet(name, value, cb=None):
    chrome.storage.sync.set({name: value}, def ():
        if chrome.runtime.lastError:
            console.log('Chrome Runtime Error', chrome.runtime.lastError.message);
        elif cb:
            cb(value)
    )

def getDefaultSettings(_list=options_list):
    settings = {}
    for option in _list:
        settings[option] = _list[option].default
    console.log("Default settings :", settings)
    return settings

def getStoredSettings(cb, key="settings", _list=options_list):
    settings = getDefaultSettings(_list)
    storageGet(key, settings, def(stored_settings):
        print("Beyond20: Stored settings (" + key + "):", stored_settings)
        cb(stored_settings)
    )

def setSettings(settings, cb=None, key="settings"):
    storageSet(key, settings, def(settings):
        console.log("Beyond20: Saved settings (" + key + "): ", settings)
        if cb:
            cb(settings)
    )

def mergeSettings(settings, cb=None, key="settings", _list=options_list):
    console.log("Saving new settings (" + key + "): ", settings)
    def setNewSettings(stored_settings):
        for k in settings:
            stored_settings[k] = settings[k]
        setSettings(stored_settings, cb, key)

    getStoredSettings(setNewSettings, key, _list)

def resetSettings(cb=None, _list=options_list):
    setSettings(getDefaultSettings(_list), cb)

def createHTMLOptionEx(name, option, short=False):
    if (option.type == "hidden") or \
            (short and not option.short?) or \
            (not option.title?):
        return None
    description = "" if short else option.description
    title = option.short if short else option.title
    description_p = list(map(E.p, description.split("\n")))
    if option.type == "bool":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-bool",
                 E.label(class_="list-content", for_=name,
                         E.h4(title),
                         *description_p,
                         E.div(class_='material-switch pull-right',
                               E.input(id=name, class_="beyond20-option-input", name=name, type_="checkbox"),
                               E.label(for_=name, class_="label-default")
                               )
                         )
                 )
    elif option.type == "string":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-string",
                 E.label(class_="list-content", for_=name, style="padding-right: 15px;",
                         E.h4(title),
                         *description_p,
                         E.input(id=name, class_="beyond20-option-input", name=name, type_="text")
                         )
                 )
    elif option.type == "combobox":
        make_li = def(o):
            return E.li(E.a(href="#", o))
        dropdown_options = list(map(make_li, Object.values(option.choices)))
        for p in description_p:
            p.classList.add("select")
        e = E.li(class_="list-group-item beyond20-option beyond20-option-combobox",
                 E.label(class_="list-content", for_=name,
                         E.h4(class_="select", title),
                         *description_p,
                         E.div(class_="button-group",
                               E.a(id=name, class_="input select beyond20-option-input", href="", option.choices[option.default]),
                               E.ul(class_="dropdown-menu",
                                    *dropdown_options),
                               E.i(id=name + "--icon", class_="icon select")
                               )
                         )
                 )
    elif option.type == "link":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-link",
                 E.label(class_="list-content", id=name,
                     E.a(href=option.default, 
                         E.h4(title)),
                     *description_p,
                     E.a(href=option.default,
                         E.div(class_="image-link",
                               E.img(class_="link-image", src=chrome.extension.getURL(option.icon))
                               )
                         )
                     )
                 )
    elif option.type == "special":
        e = option.createHTMLElement(name, short)

    return e

def createHTMLOption(name, short=False, _list=options_list):
    return createHTMLOptionEx(name, _list[name], short)

def initializeMarkaGroup(group):
    triggerOpen = $(group).find('.select')
    triggerClose = $(group).find('.dropdown-menu li')
    dropdown_menu = $(group).find(".dropdown-menu")
    marka = $(group).find('.icon')
    input = $(group).find('.input')

    # set initial Marka icon
    m = new Marka('#' + marka.attr("id"))
    m.set('triangle').size(10)
    m.rotate('down')

    # trigger dropdown
    $(group).find('.button-group').append(marka)
    makeOpenCB = def(dropdown_menu, icon, m):
            return def(event):
                event.preventDefault()
                dropdown_menu.toggleClass('open')

                if icon.hasClass("marka-icon-times"):
                    m.set('triangle').size(10)
                else:
                    m.set('times').size(15)

    makeCloseCB = def(dropdown_menu, input, m):
            return def(event):
                event.preventDefault()
                input.text(this.innerText)
                input.trigger("markaChanged")
                dropdown_menu.removeClass('open')
                m.set('triangle').size(10)

    triggerOpen.bind("click", makeOpenCB(dropdown_menu, marka, m))
    triggerClose.bind("click", makeCloseCB(dropdown_menu, input, m))

def initializeMarka():
    groups = $('.beyond20-option-combobox')

    for group in groups:
        initializeMarkaGroup(group)

def extractSettingsData(_list=options_list):
    settings = {}
    for option in _list:
        e = $("#" + option)
        if e.length > 0:
            o_type = _list[option].type
            if o_type == "bool":
                settings[option] = e.prop('checked')
            elif o_type == "combobox":
                val = e.text()
                choices = _list[option].choices
                for key in choices:
                    if choices[key] == val:
                        settings[option] = key
                        break
            elif o_type == "string":
                settings[option] = e.val()
            elif o_type == "special":
                settings[option] = _list[option].get(option)
    return settings

def loadSettings(settings, _list=options_list):
    for option in settings:
        if not _list[option]:
            continue
        o_type = _list[option].type
        if o_type == "bool":
            $("#" + option).prop('checked', settings[option])
        elif o_type == "combobox":
            val = settings[option]
            choices = _list[option].choices
            $("#" + option).text(choices[val])
        elif o_type == "string":
            $("#" + option).val(settings[option])
        elif o_type == "special":
            _list[option].set(option, settings)

def restoreSavedSettings(key="settings", _list=options_list):
    settings = getDefaultSettings(_list)
    load = def(stored_settings):
        loadSettings(stored_settings, _list)
    getStoredSettings(load, key, _list)

def saveSettings(cb, key="settings", _list=options_list):
    mergeSettings(extractSettingsData(_list), cb, key, _list)

def initializeSettings():
    initializeMarka()
    restoreSavedSettings()

def createRoll20TabCombobox(name, short, dropdown_options):
    option = options_list[name]
    description = "Restrict where rolls are sent.\nUseful if you have multiple Roll20 windows open" if short else option.description
    title = "Send Beyond 20 rolls to" if short else option.title
    description_p = list(map(E.p, description.split("\n")))
    for p in description_p:
        p.classList.add("select")
    return E.li(id="beyond20-option-roll20-tab",
                class_="list-group-item beyond20-option beyond20-option-combobox" + (" roll20-tab-short" if short else ""),
                E.label(class_="list-content", for_=name,
                        E.h4(class_="select", title),
                        *description_p,
                        E.div(class_="button-group",
                              E.a(id=name, class_="input select beyond20-option-input", href="", "All Roll20 Tabs"),
                              E.ul(class_="dropdown-menu",
                                   *dropdown_options),
                              E.i(id=name + "--icon", class_="icon select")
                              )
                        )
                )

def createRoll20TabSetting(name, short):
    if short:
        dropdown_options = [E.li(E.a(href="#", "All Roll20 Tabs")),
                            E.li(E.a(href="#", "This Campaign")),
                            E.li(E.a(href="#", "This Specific Tab"))]
    else:
        dropdown_options = [E.li(E.a(href="#", "All Roll20 Tabs"))]

    return createRoll20TabCombobox(name, short, dropdown_options)

def setRoll20TabSetting(name, settings):
    nonlocal current_tab

    val = settings[name]
    combobox = $("#beyond20-option-roll20-tab")
    if combobox.length == 0:
        return
    if combobox.hasClass("roll20-tab-short"):
        console.log("Set roll20 tab, is SHORT ", val)
        if val is None:
            $("#" + name).text("All Roll20 Tabs")
        else:
            (id, title) = (val.id, val.title)
            current_title = roll20TabTitle(current_tab)
            current_id = current_tab.id
            console.log("roll20-tab settings are : ", id, title, current_id, current_title)
            if id == 0 and title == current_title:
                $("#" + name).text("This Campaign")
            elif id == current_id and title == current_title:
                $("#" + name).text("This Specific Tab")
            else:
                dropdown_options = [E.li(E.a(href="#", "All Roll20 Tabs")),
                                    E.li(E.a(href="#", "This Campaign")),
                                    E.li(E.a(href="#", "This Specific Tab")),
                                    E.li(E.a(href="#", "Another tab or campaign (No change)"))]
                combobox.replaceWith(createRoll20TabCombobox("roll20-tab", True, dropdown_options))
                initializeMarkaGroup($("#beyond20-option-roll20-tab"))
                console.log("Added new options", dropdown_options)
                $("#" + name).text("Another tab or campaign (No change)")
                $("#" + name).attr("x-beyond20-id", id)
                $("#" + name).attr("x-beyond20-title", title)
    else:
        console.log("Set roll20 tab, is LONG ", val)
        if val is None:
            $("#" + name).text("All Roll20 Tabs")
        else:
            (id, title) = (val.id, val.title)
            console.log("roll20-tab settings are : ", id, title)
            dropdown_options = [E.li(E.a(href="#", "All Roll20 Tabs")),
                                E.li(E.a(href="#", "Campaign: " + title))]
            if id != 0:
                dropdown_options.append(E.li(E.a(href="#", "Tab #" + id + " (" + title +")")))
            combobox.replaceWith(createRoll20TabCombobox("roll20-tab", False, dropdown_options))
            initializeMarkaGroup($("#beyond20-option-roll20-tab"))
            console.log("Added new options", dropdown_options)
            $("#" + name).text($(dropdown_options[-1]).text())
            $("#" + name).attr("x-beyond20-id", id)
            $("#" + name).attr("x-beyond20-title", title)

def getRoll20TabSetting(name):
    nonlocal current_tab

    opt = $("#" + name)
    value = opt.text()
    saved_id = opt.attr("x-beyond20-id")
    saved_title = opt.attr("x-beyond20-title")
    if value == "All Roll20 Tabs":
        ret = None
    elif value in ["This Campaign", "This Specific Tab"]:
        ret = {"id": (0 if value == "This Campaign" else current_tab.id),
               "title": roll20TabTitle(current_tab)}
    elif value.startsWith("Campaign: "):
        ret = {"id": 0, "title": saved_title}
    elif value == "Another tab or campaign (No change)" or \
            value.startsWith("Tab #"):
        ret = {"id": saved_id, "title": saved_title}
    console.log("Get roll20 tab: ", ret)
    return ret    

def setCurrentTab(tab):
    nonlocal current_tab
    current_tab = tab

current_tab = None
options_list["roll20-tab"]["createHTMLElement"] = createRoll20TabSetting
options_list["roll20-tab"]["set"] = setRoll20TabSetting
options_list["roll20-tab"]["get"] = getRoll20TabSetting
