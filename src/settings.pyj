from elementmaker import E 

# key: [short title, title, description, type, default, extra_options]
# Types: bool, string, combobox, link

options_list = {
    "whispers": ["Whisper rolls", "Whisper rolls to the DM",\
         "If enabled, all the rolls will be whispered to the DM",\
         "bool", False],

    "roll-advantage": ["Roll with Advantage", "Always roll Advantange/Disadvantage", \
         "Always roll a second dice for Advantage/Disadvantage", \
         "bool", True],

    "initiative-tracker": ["Add Initiative to tracker", "Add initiative roll to the Turn Tracker", \
         "Adds the result of the initiative roll to the turn tracker.\nThis requires you to have a token selected in Roll20, and will also change the way the output of 'Advantage on initiative' rolls appear", \
         "bool", True],

    "subst-roll20": [None, "Replace Dices formulas in Roll20", \
         "In Roll20, if a spell card or an item or a feat has a dice formula in its description,\nenabling this will make the formula clickable to generate the roll in chat.", \
         "bool", True],

    "subst-dndbeyond": [None, "Replace Dices formulas in D&D Beyond", \
         "In the D&D Beyond side panel, if a spell, item, feat or action has a dice formula in its description,\nenabling this will add a dice icon next to the formula to allow you to roll it.", \
         "bool", True],

    "crit-prefix": [None, "Critical Hit Prefix", \
         "Prefix to add to the Critical Hit dice result.\nI've found it less confusing for players to point out that the '+ X' is the crit damage", \
         "string", "Crit: "],

    "template": [None, "Roll20 Character Sheet Setting", \
         "Select the Character Sheet Template that you use in Roll20\nIf the templates do not match, you will not see anything printed in the Roll20 chat.", \
         "combobox", "roll20", {"roll20": "D&D 5E By Roll20", "default": "Other templates"}],

    "donate": ["Buy me rations for 1 day", "Donate to show your appreciation!", \
         "I know you already appreciate this extension, otherwise you wouldn't be using it!\nBut if you wish to donate to help keep development active or just to say thank you, you can!", \
         "link", "https://www.paypal.me/KaKaRoTo", "images/donate.png"]
    }

def getDefaultSettings():
    settings = {}
    for option in options_list:
        settings[option] = options_list[option][4]
    console.log("Default settings :", settings)
    return settings

def getStoredSettings(cb):
    settings = getDefaultSettings()
    chrome.storage.sync.get({"settings": settings}, def(items):
        console.log("Stored settings :", settings)
        cb(items.settings)
    )

def setSettings(settings, cb=None):
    chrome.storage.sync.set({"settings": settings}, def():
        console.log("Saved settings : ", settings)
        if cb:
            cb(settings)
    )

def resetSettings(cb=None):
    setSettings(getDefaultSettings(), cb)

def createHTMLOption(name, short=False):
    (short_title, title, description, option_type, default_value, extra) = options_list[name]
    if short and short_title is None:
        return None
    description = "" if short else description
    description_p = list(map(E.p, description.split("\n")))
    if option_type == "bool":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-bool",
                 E.label(class_="list-content", for_=name,
                         E.h4(short_title if short else title),
                         *description_p,
                         E.div(class_='material-switch pull-right',
                               E.input(id=name, class_="beyond20-option-input", name=name, type_="checkbox"),
                               E.label(for_=name, class_="label-default")
                               )
                         )
                 )
    elif option_type == "string":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-string",
                 E.label(class_="list-content", for_=name, style="padding-right: 15px;",
                         E.h4(short_title if short else title),
                         *description_p,
                         E.input(id=name, class_="beyond20-option-input", name=name, type_="text")
                         )
                 )
    elif option_type == "combobox":
        make_li = def(o):
            return E.li(E.a(href="#", o))
        dropdown_options = list(map(make_li, Object.values(extra)))
        for p in description_p:
            p.classList.add("select")
        e = E.li(class_="list-group-item beyond20-option beyond20-option-combobox",
                 E.label(class_="list-content", for_=name,
                         E.h4(class_="select", short_title if short else title),
                         *description_p,
                         E.div(class_="button-group",
                               E.a(id=name, class_="input select", href="", extra[default_value]),
                               E.ul(class_="dropdown-menu",
                                    *dropdown_options),
                               E.i(id=name + "--icon", class_="icon select")
                               )
                         )
                 )
    elif option_type == "link":
        e = E.li(class_="list-group-item beyond20-option beyond20-option-link",
                 E.label(class_="list-content", id=name,
                     E.a(href=default_value, 
                         E.h4(short_title if short else title)),
                     *description_p,
                     E.a(href=default_value,
                         E.div(class_="image-link",
                               E.img(class_="link-image", src=chrome.extension.getURL(extra))
                               )
                         )
                     )
                 )

    return e

def initializeMarka():
    groups = $('.beyond20-option-combobox')

    for i in range(groups.length):
        triggerOpen = groups.eq(i).find('.select')
        triggerClose = groups.eq(i).find('.dropdown-menu li')
        dropdown_menu = groups.eq(i).find(".dropdown-menu")
        marka = groups.eq(i).find('.icon')
        input = groups.eq(i).find('.input')

        # set initial Marka icon
        m = new Marka('#' + marka.attr("id"))
        m.set('triangle').size(10)
        m.rotate('down')

        # trigger dropdown
        groups.eq(i).find('.button-group').append(marka)
        makeOpenCB = def(dropdown_menu, icon, m):
            return def(event):
                event.preventDefault()
                dropdown_menu.toggleClass('open')

                if icon.hasClass("marka-icon-times"):
                    m.set('triangle').size(10)
                else:
                    m.set('times').size(15)

        makeCloseCB = def(dropdown_menu, input, m):
            return def(event):
                event.preventDefault()
                input.text(this.innerText)
                dropdown_menu.removeClass('open')
                m.set('triangle').size(10)

        triggerOpen.bind("click", makeOpenCB(dropdown_menu, marka, m))
        triggerClose.bind("click", makeCloseCB(dropdown_menu, input, m))

def extractSettingsData():
    settings = {}
    for option in options_list:
        o_type = options_list[option][3]
        if o_type == "bool":
            e = $("#" + option)
            if e.length > 0:
                settings[option] = e.prop('checked')
        elif o_type == "combobox":
            e = $("#" + option)
            if e.length > 0:
                val = e.text()
                options = options_list[option][5]
                for key in options:
                    if options[key] == val:
                        settings[option] = key
                        break
        elif o_type == "string":
            e = $("#" + option)
            if e.length > 0:
                settings[option] = e.val()

    return settings

def loadSettings(settings):
    for option in settings:
        o_type = options_list[option][3]
        if o_type == "bool":
            $("#" + option).prop('checked', settings[option])
        elif o_type == "combobox":
            val = settings[option]
            extra = options_list[option][5]
            $("#" + option).text(extra[val])
        elif o_type == "string":
            $("#" + option).val(settings[option])

def restoreSavedSettings():
    settings = getDefaultSettings()
    getStoredSettings(loadSettings)

def saveSettings(cb):
    settings = extractSettingsData()
    console.log("Saving new settings : ", settings)
    def saveNewSettings(stored_settings):
        for key in settings:
            stored_settings[key] = settings[key]
        setSettings(stored_settings, cb)

    getStoredSettings(saveNewSettings)

def initializeSettings():
    initializeMarka()
    restoreSavedSettings()
